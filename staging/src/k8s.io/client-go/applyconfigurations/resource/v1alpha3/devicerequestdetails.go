/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	resourcev1alpha3 "k8s.io/api/resource/v1alpha3"
)

// DeviceRequestDetailsApplyConfiguration represents a declarative configuration of the DeviceRequestDetails type for use
// with apply.
type DeviceRequestDetailsApplyConfiguration struct {
	DeviceClassName *string                            `json:"deviceClassName,omitempty"`
	Selectors       []DeviceSelectorApplyConfiguration `json:"selectors,omitempty"`
	CountMode       *resourcev1alpha3.DeviceCountMode  `json:"countMode,omitempty"`
	Count           *int64                             `json:"count,omitempty"`
	AdminAccess     *bool                              `json:"adminAccess,omitempty"`
}

// DeviceRequestDetailsApplyConfiguration constructs a declarative configuration of the DeviceRequestDetails type for use with
// apply.
func DeviceRequestDetails() *DeviceRequestDetailsApplyConfiguration {
	return &DeviceRequestDetailsApplyConfiguration{}
}

// WithDeviceClassName sets the DeviceClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeviceClassName field is set to the value of the last call.
func (b *DeviceRequestDetailsApplyConfiguration) WithDeviceClassName(value string) *DeviceRequestDetailsApplyConfiguration {
	b.DeviceClassName = &value
	return b
}

// WithSelectors adds the given value to the Selectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selectors field.
func (b *DeviceRequestDetailsApplyConfiguration) WithSelectors(values ...*DeviceSelectorApplyConfiguration) *DeviceRequestDetailsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSelectors")
		}
		b.Selectors = append(b.Selectors, *values[i])
	}
	return b
}

// WithCountMode sets the CountMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CountMode field is set to the value of the last call.
func (b *DeviceRequestDetailsApplyConfiguration) WithCountMode(value resourcev1alpha3.DeviceCountMode) *DeviceRequestDetailsApplyConfiguration {
	b.CountMode = &value
	return b
}

// WithCount sets the Count field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Count field is set to the value of the last call.
func (b *DeviceRequestDetailsApplyConfiguration) WithCount(value int64) *DeviceRequestDetailsApplyConfiguration {
	b.Count = &value
	return b
}

// WithAdminAccess sets the AdminAccess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminAccess field is set to the value of the last call.
func (b *DeviceRequestDetailsApplyConfiguration) WithAdminAccess(value bool) *DeviceRequestDetailsApplyConfiguration {
	b.AdminAccess = &value
	return b
}
