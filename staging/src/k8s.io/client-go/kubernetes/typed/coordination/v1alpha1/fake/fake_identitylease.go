/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "k8s.io/api/coordination/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	coordinationv1alpha1 "k8s.io/client-go/applyconfigurations/coordination/v1alpha1"
	testing "k8s.io/client-go/testing"
)

// FakeIdentityLeases implements IdentityLeaseInterface
type FakeIdentityLeases struct {
	Fake *FakeCoordinationV1alpha1
	ns   string
}

var identityleasesResource = v1alpha1.SchemeGroupVersion.WithResource("identityleases")

var identityleasesKind = v1alpha1.SchemeGroupVersion.WithKind("IdentityLease")

// Get takes name of the identityLease, and returns the corresponding identityLease object, and an error if there is any.
func (c *FakeIdentityLeases) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.IdentityLease, err error) {
	emptyResult := &v1alpha1.IdentityLease{}
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(identityleasesResource, c.ns, name), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.IdentityLease), err
}

// List takes label and field selectors, and returns the list of IdentityLeases that match those selectors.
func (c *FakeIdentityLeases) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.IdentityLeaseList, err error) {
	emptyResult := &v1alpha1.IdentityLeaseList{}
	obj, err := c.Fake.
		Invokes(testing.NewListAction(identityleasesResource, identityleasesKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.IdentityLeaseList{ListMeta: obj.(*v1alpha1.IdentityLeaseList).ListMeta}
	for _, item := range obj.(*v1alpha1.IdentityLeaseList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested identityLeases.
func (c *FakeIdentityLeases) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(identityleasesResource, c.ns, opts))

}

// Create takes the representation of a identityLease and creates it.  Returns the server's representation of the identityLease, and an error, if there is any.
func (c *FakeIdentityLeases) Create(ctx context.Context, identityLease *v1alpha1.IdentityLease, opts v1.CreateOptions) (result *v1alpha1.IdentityLease, err error) {
	emptyResult := &v1alpha1.IdentityLease{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(identityleasesResource, c.ns, identityLease), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.IdentityLease), err
}

// Update takes the representation of a identityLease and updates it. Returns the server's representation of the identityLease, and an error, if there is any.
func (c *FakeIdentityLeases) Update(ctx context.Context, identityLease *v1alpha1.IdentityLease, opts v1.UpdateOptions) (result *v1alpha1.IdentityLease, err error) {
	emptyResult := &v1alpha1.IdentityLease{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(identityleasesResource, c.ns, identityLease), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.IdentityLease), err
}

// Delete takes name of the identityLease and deletes it. Returns an error if one occurs.
func (c *FakeIdentityLeases) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(identityleasesResource, c.ns, name, opts), &v1alpha1.IdentityLease{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIdentityLeases) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(identityleasesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.IdentityLeaseList{})
	return err
}

// Patch applies the patch and returns the patched identityLease.
func (c *FakeIdentityLeases) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.IdentityLease, err error) {
	emptyResult := &v1alpha1.IdentityLease{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(identityleasesResource, c.ns, name, pt, data, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.IdentityLease), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied identityLease.
func (c *FakeIdentityLeases) Apply(ctx context.Context, identityLease *coordinationv1alpha1.IdentityLeaseApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.IdentityLease, err error) {
	if identityLease == nil {
		return nil, fmt.Errorf("identityLease provided to Apply must not be nil")
	}
	data, err := json.Marshal(identityLease)
	if err != nil {
		return nil, err
	}
	name := identityLease.Name
	if name == nil {
		return nil, fmt.Errorf("identityLease.Name must be provided to Apply")
	}
	emptyResult := &v1alpha1.IdentityLease{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(identityleasesResource, c.ns, *name, types.ApplyPatchType, data), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.IdentityLease), err
}
