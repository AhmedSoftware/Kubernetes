/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConditionStatus aligns with v1.ConditionStatus
type ConditionStatus int32

const (
	ConditionStatus_True    ConditionStatus = 0
	ConditionStatus_False   ConditionStatus = 1
	ConditionStatus_Unknown ConditionStatus = 2
)

var ConditionStatus_name = map[int32]string{
	0: "True",
	1: "False",
	2: "Unknown",
}

var ConditionStatus_value = map[string]int32{
	"True":    0,
	"False":   1,
	"Unknown": 2,
}

func (x ConditionStatus) String() string {
	return proto.EnumName(ConditionStatus_name, int32(x))
}

func (ConditionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// PodConditionType aligns with v1.PodConditionType
// due to limiting messages size the type was changed to int
type PodConditionType int32

const (
	PodConditionType_ContainersReady  PodConditionType = 0
	PodConditionType_Initialized      PodConditionType = 1
	PodConditionType_Ready            PodConditionType = 2
	PodConditionType_PodScheduled     PodConditionType = 3
	PodConditionType_DisruptionTarget PodConditionType = 4
)

var PodConditionType_name = map[int32]string{
	0: "ContainersReady",
	1: "Initialized",
	2: "Ready",
	3: "PodScheduled",
	4: "DisruptionTarget",
}

var PodConditionType_value = map[string]int32{
	"ContainersReady":  0,
	"Initialized":      1,
	"Ready":            2,
	"PodScheduled":     3,
	"DisruptionTarget": 4,
}

func (x PodConditionType) String() string {
	return proto.EnumName(PodConditionType_name, int32(x))
}

func (PodConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

// PodStatusListRequest is the request made to the PodStatus service to list all local pod's statuses.
type PodStatusListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodStatusListRequest) Reset()      { *m = PodStatusListRequest{} }
func (*PodStatusListRequest) ProtoMessage() {}
func (*PodStatusListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *PodStatusListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusListRequest.Merge(m, src)
}
func (m *PodStatusListRequest) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusListRequest proto.InternalMessageInfo

// PodStatusListResponse returns a List of PodStatus containing all local pod's running on a given node.
type PodStatusListResponse struct {
	Pods                 []*PodStatusType `protobuf:"bytes,1,rep,name=Pods,proto3" json:"Pods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PodStatusListResponse) Reset()      { *m = PodStatusListResponse{} }
func (*PodStatusListResponse) ProtoMessage() {}
func (*PodStatusListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *PodStatusListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusListResponse.Merge(m, src)
}
func (m *PodStatusListResponse) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusListResponse proto.InternalMessageInfo

func (m *PodStatusListResponse) GetPods() []*PodStatusType {
	if m != nil {
		return m.Pods
	}
	return nil
}

// PodStatusWatchRequest is the request made to the PodStatus service for watch all local pod's statuses.
type PodStatusWatchRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodStatusWatchRequest) Reset()      { *m = PodStatusWatchRequest{} }
func (*PodStatusWatchRequest) ProtoMessage() {}
func (*PodStatusWatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *PodStatusWatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusWatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusWatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusWatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusWatchRequest.Merge(m, src)
}
func (m *PodStatusWatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusWatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusWatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusWatchRequest proto.InternalMessageInfo

// PodStatusGetRequest is the request made to the PodStatus service to get Pod's status.
type PodStatusGetRequest struct {
	PodUID               string   `protobuf:"bytes,1,opt,name=podUID,proto3" json:"podUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodStatusGetRequest) Reset()      { *m = PodStatusGetRequest{} }
func (*PodStatusGetRequest) ProtoMessage() {}
func (*PodStatusGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *PodStatusGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusGetRequest.Merge(m, src)
}
func (m *PodStatusGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusGetRequest proto.InternalMessageInfo

func (m *PodStatusGetRequest) GetPodUID() string {
	if m != nil {
		return m.PodUID
	}
	return ""
}

// PodStatusGetResponse returns PodStatus.
type PodStatusGetResponse struct {
	Status               *PodStatusType `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PodStatusGetResponse) Reset()      { *m = PodStatusGetResponse{} }
func (*PodStatusGetResponse) ProtoMessage() {}
func (*PodStatusGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *PodStatusGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusGetResponse.Merge(m, src)
}
func (m *PodStatusGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusGetResponse proto.InternalMessageInfo

func (m *PodStatusGetResponse) GetStatus() *PodStatusType {
	if m != nil {
		return m.Status
	}
	return nil
}

// PodStatusType returns a Pod details and list of status Conditions with deletion info.
type PodStatusType struct {
	PodUID               string          `protobuf:"bytes,1,opt,name=podUID,proto3" json:"podUID,omitempty"`
	PodNamespace         string          `protobuf:"bytes,2,opt,name=podNamespace,proto3" json:"podNamespace,omitempty"`
	PodName              string          `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	Static               bool            `protobuf:"varint,4,opt,name=static,proto3" json:"static,omitempty"`
	Conditions           []*PodCondition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	DeletionTimestamp    *v1.Time        `protobuf:"bytes,6,opt,name=DeletionTimestamp,proto3" json:"DeletionTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PodStatusType) Reset()      { *m = PodStatusType{} }
func (*PodStatusType) ProtoMessage() {}
func (*PodStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *PodStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusType.Merge(m, src)
}
func (m *PodStatusType) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusType proto.InternalMessageInfo

func (m *PodStatusType) GetPodUID() string {
	if m != nil {
		return m.PodUID
	}
	return ""
}

func (m *PodStatusType) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *PodStatusType) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *PodStatusType) GetStatic() bool {
	if m != nil {
		return m.Static
	}
	return false
}

func (m *PodStatusType) GetConditions() []*PodCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *PodStatusType) GetDeletionTimestamp() *v1.Time {
	if m != nil {
		return m.DeletionTimestamp
	}
	return nil
}

// PodCondition aligns with v1.PodCondition.
type PodCondition struct {
	Type                 PodConditionType `protobuf:"varint,1,opt,name=Type,proto3,enum=v1alpha1.PodConditionType" json:"Type,omitempty"`
	Status               ConditionStatus  `protobuf:"varint,2,opt,name=Status,proto3,enum=v1alpha1.ConditionStatus" json:"Status,omitempty"`
	LastProbeTime        *v1.Time         `protobuf:"bytes,3,opt,name=LastProbeTime,proto3" json:"LastProbeTime,omitempty"`
	LastTransitionTime   *v1.Time         `protobuf:"bytes,4,opt,name=LastTransitionTime,proto3" json:"LastTransitionTime,omitempty"`
	Reason               string           `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Message              string           `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PodCondition) Reset()      { *m = PodCondition{} }
func (*PodCondition) ProtoMessage() {}
func (*PodCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *PodCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodCondition.Merge(m, src)
}
func (m *PodCondition) XXX_Size() int {
	return m.Size()
}
func (m *PodCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_PodCondition.DiscardUnknown(m)
}

var xxx_messageInfo_PodCondition proto.InternalMessageInfo

func (m *PodCondition) GetType() PodConditionType {
	if m != nil {
		return m.Type
	}
	return PodConditionType_ContainersReady
}

func (m *PodCondition) GetStatus() ConditionStatus {
	if m != nil {
		return m.Status
	}
	return ConditionStatus_True
}

func (m *PodCondition) GetLastProbeTime() *v1.Time {
	if m != nil {
		return m.LastProbeTime
	}
	return nil
}

func (m *PodCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *PodCondition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1alpha1.ConditionStatus", ConditionStatus_name, ConditionStatus_value)
	proto.RegisterEnum("v1alpha1.PodConditionType", PodConditionType_name, PodConditionType_value)
	proto.RegisterType((*PodStatusListRequest)(nil), "v1alpha1.PodStatusListRequest")
	proto.RegisterType((*PodStatusListResponse)(nil), "v1alpha1.PodStatusListResponse")
	proto.RegisterType((*PodStatusWatchRequest)(nil), "v1alpha1.PodStatusWatchRequest")
	proto.RegisterType((*PodStatusGetRequest)(nil), "v1alpha1.PodStatusGetRequest")
	proto.RegisterType((*PodStatusGetResponse)(nil), "v1alpha1.PodStatusGetResponse")
	proto.RegisterType((*PodStatusType)(nil), "v1alpha1.PodStatusType")
	proto.RegisterType((*PodCondition)(nil), "v1alpha1.PodCondition")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x43, 0x08, 0xe4, 0x00, 0x17, 0xdf, 0x81, 0x0b, 0xbe, 0x91, 0xae, 0x2f, 0xf2, 0x0a,
	0xa5, 0xc2, 0x56, 0xa0, 0xaa, 0xba, 0x6e, 0xa3, 0x52, 0x24, 0xda, 0x46, 0x26, 0xa8, 0x15, 0xbb,
	0x89, 0x7d, 0xea, 0x8c, 0x92, 0x78, 0x5c, 0xcf, 0x98, 0x8a, 0xae, 0xfa, 0x06, 0xed, 0xa3, 0xf4,
	0x31, 0x58, 0xb6, 0xbb, 0x2e, 0x4b, 0xfa, 0x22, 0xd5, 0x8c, 0xe3, 0xfc, 0xd0, 0x50, 0x89, 0x9d,
	0xbf, 0x73, 0xbe, 0xf3, 0xcd, 0x99, 0xf3, 0x79, 0x0e, 0xd4, 0x68, 0xc2, 0xdc, 0x24, 0xe5, 0x92,
	0x93, 0xd5, 0xcb, 0x26, 0x1d, 0x24, 0x3d, 0xda, 0xac, 0x1f, 0x44, 0x4c, 0xf6, 0xb2, 0xae, 0x1b,
	0xf0, 0xa1, 0x17, 0xf1, 0x88, 0x7b, 0x9a, 0xd0, 0xcd, 0xde, 0x6a, 0xa4, 0x81, 0xfe, 0xca, 0x0b,
	0xeb, 0x0f, 0xfb, 0x8f, 0x85, 0xcb, 0xb8, 0x47, 0x13, 0x36, 0xa4, 0x41, 0x8f, 0xc5, 0x98, 0x5e,
	0x79, 0x49, 0x3f, 0x52, 0x01, 0xe1, 0x0d, 0x51, 0x52, 0xef, 0xb2, 0xe9, 0x45, 0x18, 0x63, 0x4a,
	0x25, 0x86, 0x79, 0x95, 0xb3, 0x03, 0xdb, 0x6d, 0x1e, 0x9e, 0x49, 0x2a, 0x33, 0x71, 0xca, 0x84,
	0xf4, 0xf1, 0x5d, 0x86, 0x42, 0x3a, 0x2d, 0xf8, 0xe7, 0x56, 0x5c, 0x24, 0x3c, 0x16, 0x48, 0x1e,
	0x40, 0xa5, 0xcd, 0x43, 0x61, 0x19, 0x7b, 0x4b, 0xfb, 0x6b, 0x87, 0xbb, 0x6e, 0xd1, 0xae, 0x3b,
	0xa1, 0x77, 0xae, 0x12, 0xf4, 0x35, 0xc9, 0xd9, 0x9d, 0x51, 0x79, 0x4d, 0x65, 0xd0, 0x2b, 0xe4,
	0x0f, 0x60, 0x6b, 0x92, 0x38, 0xc6, 0xe2, 0x54, 0xb2, 0x03, 0xd5, 0x84, 0x87, 0xe7, 0x27, 0x2d,
	0xcb, 0xd8, 0x33, 0xf6, 0x6b, 0xfe, 0x18, 0x39, 0xc7, 0x33, 0x5d, 0x6a, 0xfa, 0xb8, 0x19, 0x0f,
	0xaa, 0x79, 0x50, 0xf3, 0xff, 0xd0, 0xce, 0x98, 0xe6, 0x7c, 0x2a, 0xc3, 0xc6, 0x5c, 0xe6, 0xae,
	0x23, 0x89, 0x03, 0xeb, 0x09, 0x0f, 0x5f, 0xd2, 0x21, 0x8a, 0x84, 0x06, 0x68, 0x95, 0x75, 0x76,
	0x2e, 0x46, 0x2c, 0x58, 0x19, 0x63, 0x6b, 0x49, 0xa7, 0x0b, 0xa8, 0x54, 0x85, 0xa4, 0x92, 0x05,
	0x56, 0x65, 0xcf, 0xd8, 0x5f, 0xf5, 0xc7, 0x88, 0x3c, 0x02, 0x08, 0x78, 0x1c, 0x32, 0xc9, 0x78,
	0x2c, 0xac, 0x65, 0x3d, 0xc3, 0x9d, 0xb9, 0xa6, 0x9f, 0x16, 0x69, 0x7f, 0x86, 0x49, 0xde, 0xc0,
	0xdf, 0x2d, 0x1c, 0xa0, 0x02, 0x1d, 0x36, 0x44, 0x21, 0xe9, 0x30, 0xb1, 0xaa, 0xfa, 0xce, 0x0d,
	0x37, 0x37, 0xde, 0x9d, 0x35, 0xde, 0x4d, 0xfa, 0x91, 0x0a, 0x08, 0x57, 0x19, 0xef, 0x5e, 0x36,
	0x5d, 0x55, 0xe6, 0xff, 0x2e, 0xe2, 0x7c, 0x2b, 0xc3, 0xfa, 0xec, 0xb1, 0xc4, 0x85, 0x8a, 0x1a,
	0x8c, 0x1e, 0xc7, 0x5f, 0x87, 0xf5, 0xc5, 0xcd, 0xe5, 0x1e, 0xeb, 0x01, 0x36, 0x27, 0x1e, 0x94,
	0x75, 0xc5, 0xbf, 0xd3, 0x8a, 0x09, 0x3d, 0x27, 0x14, 0x2e, 0x90, 0x36, 0x6c, 0x9c, 0x52, 0x21,
	0xdb, 0x29, 0xef, 0xa2, 0xea, 0x44, 0x4f, 0xef, 0x7e, 0x37, 0x99, 0x17, 0x20, 0x17, 0x40, 0x54,
	0xa0, 0x93, 0xd2, 0x58, 0xb0, 0xe2, 0x82, 0x7a, 0xf6, 0xf7, 0x93, 0x5d, 0xa0, 0xa2, 0xbc, 0xf4,
	0x91, 0x0a, 0x1e, 0x5b, 0xcb, 0xf9, 0x1f, 0x92, 0x23, 0xe5, 0xfe, 0x0b, 0x14, 0x82, 0x46, 0xa8,
	0x9d, 0xa8, 0xf9, 0x05, 0x6c, 0x1c, 0xc1, 0xe6, 0xad, 0xab, 0x93, 0x55, 0xa8, 0x74, 0xd2, 0x0c,
	0xcd, 0x12, 0xa9, 0xc1, 0xf2, 0x33, 0x3a, 0x10, 0x68, 0x1a, 0x64, 0x0d, 0x56, 0xce, 0xe3, 0x7e,
	0xcc, 0xdf, 0xc7, 0x66, 0xb9, 0xd1, 0x07, 0xf3, 0xf6, 0x84, 0xc9, 0x96, 0x16, 0x92, 0x54, 0xb5,
	0x2c, 0x7c, 0xa4, 0xe1, 0x95, 0x59, 0x22, 0x9b, 0xb0, 0x76, 0x12, 0x33, 0xc9, 0xe8, 0x80, 0x7d,
	0xc0, 0xd0, 0x34, 0x94, 0x62, 0x9e, 0x2b, 0x13, 0x53, 0x9b, 0x79, 0x16, 0xf4, 0x30, 0xcc, 0x06,
	0x18, 0x9a, 0x4b, 0x64, 0x1b, 0xcc, 0x16, 0x13, 0x69, 0x96, 0x68, 0x51, 0x9a, 0x46, 0x28, 0xcd,
	0xca, 0xe1, 0x17, 0x03, 0x6a, 0x93, 0x77, 0x40, 0x5e, 0xc1, 0xfa, 0x31, 0xca, 0x29, 0xfe, 0x6f,
	0xc1, 0x33, 0x9a, 0xbe, 0xd2, 0xba, 0x7d, 0x57, 0x3a, 0x7f, 0x95, 0x4e, 0x89, 0xf8, 0xb0, 0xa1,
	0x96, 0xc6, 0x54, 0x71, 0x51, 0xc9, 0xcc, 0xba, 0xa9, 0xff, 0x7f, 0x67, 0xbe, 0xd0, 0x7c, 0xf2,
	0xfc, 0xfa, 0xc6, 0x36, 0xbe, 0xdf, 0xd8, 0xa5, 0x8f, 0x23, 0xdb, 0xb8, 0x1e, 0xd9, 0xc6, 0xd7,
	0x91, 0x6d, 0xfc, 0x18, 0xd9, 0xc6, 0xe7, 0x9f, 0x76, 0xe9, 0xa2, 0x31, 0xde, 0x7e, 0xfd, 0xac,
	0xab, 0x7e, 0xf1, 0xe9, 0xe2, 0x4b, 0x78, 0x28, 0xb4, 0x9c, 0x57, 0x9c, 0xd0, 0xad, 0xea, 0xd5,
	0x77, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x62, 0xad, 0x4d, 0x76, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PodStatusClient is the client API for PodStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PodStatusClient interface {
	// GetPodStatus returns a PodStatus for given pod's UID
	GetPodStatus(ctx context.Context, in *PodStatusGetRequest, opts ...grpc.CallOption) (*PodStatusGetResponse, error)
	// ListPodStatus returns a of List of PodStatus
	ListPodStatus(ctx context.Context, in *PodStatusListRequest, opts ...grpc.CallOption) (*PodStatusListResponse, error)
}

type podStatusClient struct {
	cc *grpc.ClientConn
}

func NewPodStatusClient(cc *grpc.ClientConn) PodStatusClient {
	return &podStatusClient{cc}
}

func (c *podStatusClient) GetPodStatus(ctx context.Context, in *PodStatusGetRequest, opts ...grpc.CallOption) (*PodStatusGetResponse, error) {
	out := new(PodStatusGetResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.PodStatus/GetPodStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podStatusClient) ListPodStatus(ctx context.Context, in *PodStatusListRequest, opts ...grpc.CallOption) (*PodStatusListResponse, error) {
	out := new(PodStatusListResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.PodStatus/ListPodStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodStatusServer is the server API for PodStatus service.
type PodStatusServer interface {
	// GetPodStatus returns a PodStatus for given pod's UID
	GetPodStatus(context.Context, *PodStatusGetRequest) (*PodStatusGetResponse, error)
	// ListPodStatus returns a of List of PodStatus
	ListPodStatus(context.Context, *PodStatusListRequest) (*PodStatusListResponse, error)
}

// UnimplementedPodStatusServer can be embedded to have forward compatible implementations.
type UnimplementedPodStatusServer struct {
}

func (*UnimplementedPodStatusServer) GetPodStatus(ctx context.Context, req *PodStatusGetRequest) (*PodStatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodStatus not implemented")
}
func (*UnimplementedPodStatusServer) ListPodStatus(ctx context.Context, req *PodStatusListRequest) (*PodStatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPodStatus not implemented")
}

func RegisterPodStatusServer(s *grpc.Server, srv PodStatusServer) {
	s.RegisterService(&_PodStatus_serviceDesc, srv)
}

func _PodStatus_GetPodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodStatusServer).GetPodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.PodStatus/GetPodStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodStatusServer).GetPodStatus(ctx, req.(*PodStatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodStatus_ListPodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStatusListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodStatusServer).ListPodStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.PodStatus/ListPodStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodStatusServer).ListPodStatus(ctx, req.(*PodStatusListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.PodStatus",
	HandlerType: (*PodStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodStatus",
			Handler:    _PodStatus_GetPodStatus_Handler,
		},
		{
			MethodName: "ListPodStatus",
			Handler:    _PodStatus_ListPodStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *PodStatusListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PodStatusListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodStatusWatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusWatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusWatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PodStatusGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PodUID) > 0 {
		i -= len(m.PodUID)
		copy(dAtA[i:], m.PodUID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatusGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletionTimestamp != nil {
		{
			size, err := m.DeletionTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Static {
		i--
		if m.Static {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodUID) > 0 {
		i -= len(m.PodUID)
		copy(dAtA[i:], m.PodUID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastProbeTime != nil {
		{
			size, err := m.LastProbeTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PodStatusListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PodStatusListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *PodStatusWatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PodStatusGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PodStatusGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PodStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodUID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Static {
		n += 2
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.DeletionTimestamp != nil {
		l = m.DeletionTimestamp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PodCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.LastProbeTime != nil {
		l = m.LastProbeTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PodStatusListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusListRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPods := "[]*PodStatusType{"
	for _, f := range this.Pods {
		repeatedStringForPods += strings.Replace(f.String(), "PodStatusType", "PodStatusType", 1) + ","
	}
	repeatedStringForPods += "}"
	s := strings.Join([]string{`&PodStatusListResponse{`,
		`Pods:` + repeatedStringForPods + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusWatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusWatchRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusGetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusGetRequest{`,
		`PodUID:` + fmt.Sprintf("%v", this.PodUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusGetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusGetResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "PodStatusType", "PodStatusType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]*PodCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(f.String(), "PodCondition", "PodCondition", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&PodStatusType{`,
		`PodUID:` + fmt.Sprintf("%v", this.PodUID) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`Static:` + fmt.Sprintf("%v", this.Static) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`DeletionTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.DeletionTimestamp), "Time", "v1.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastProbeTime:` + strings.Replace(fmt.Sprintf("%v", this.LastProbeTime), "Time", "v1.Time", 1) + `,`,
		`LastTransitionTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTransitionTime), "Time", "v1.Time", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PodStatusListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &PodStatusType{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusWatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusWatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusWatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PodStatusType{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Static", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Static = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &PodCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletionTimestamp == nil {
				m.DeletionTimestamp = &v1.Time{}
			}
			if err := m.DeletionTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PodConditionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConditionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProbeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastProbeTime == nil {
				m.LastProbeTime = &v1.Time{}
			}
			if err := m.LastProbeTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
