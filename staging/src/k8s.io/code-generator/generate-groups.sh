#!/usr/bin/env bash

# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

# generate-groups generates everything for a project with external types, e.g. a project based
# on CustomResourceDefinitions.

if [ "$#" -lt 4 ] || [ "${1}" == "--help" ]; then
  cat <<EOF
Usage: $(basename "$0") <generators> <output-package> <apis-package> <groups-versions> ...

  <generators>        comma-separated list of generators to run (applyconfiguration,client,conversion,deepcopy,
                      defaulter,informer,lister,openapi) or "all".
  <output-package>    the output package name (e.g. github.com/example/project/pkg/generated).
  <apis-package>      the external types dir (e.g. github.com/example/api or github.com/example/project/pkg/apis).
  <groups-versions>   the groups and their versions in the format "groupA:v1,v2 groupB:v1 groupC:v2", relative
                      to <api-package>.
  ...                 arbitrary flags passed to all generator binaries.


Examples:
  $(basename "$0") all             github.com/example/project/pkg/client github.com/example/project/pkg/apis "foo:v1 bar:v1alpha1,v1beta1"
  $(basename "$0") deepcopy,client github.com/example/project/pkg/client github.com/example/project/pkg/apis "foo:v1 bar:v1alpha1,v1beta1"
EOF
  exit 0
fi

GENS="$1"
OUTPUT_PKG="$2"
APIS_PKG="$3"
GROUPS_WITH_VERSIONS="$4"
shift 4

(
  # To support running this script from anywhere, first cd into this directory,
  # and then install with forced module mode on and fully qualified name.
  cd "$(dirname "${0}")"
  GO111MODULE=on go install k8s.io/code-generator/cmd/{applyconfiguration-gen,client-gen,conversion-gen,deepcopy-gen,defaulter-gen,informer-gen,lister-gen,openapi-gen}
)
# Go installs the above commands to get installed in $GOBIN if defined, and $GOPATH/bin otherwise:
GOBIN="$(go env GOBIN)"
gobin="${GOBIN:-$(go env GOPATH)/bin}"

function git_find() {
    # Similar to find but faster and easier to understand.  We want to include
    # modified and untracked files because this might be running against code
    # which is not tracked by git yet.
    git ls-files -cmo --exclude-standard "$@"
}

function git_grep() {
    # We want to include modified and untracked files because this might be
    # running against code which is not tracked by git yet.
    git grep --untracked "$@"
}

function codegen::join() { local IFS="$1"; shift; echo "$*"; }

# enumerate group versions
FQ_APIS=() # e.g. k8s.io/api/apps/v1
GROUP_VERSIONS=() # e.g. apps/v1
for GVs in ${GROUPS_WITH_VERSIONS}; do
  IFS=: read -r G Vs <<<"${GVs}"

  # enumerate versions
  for V in ${Vs//,/ }; do
    FQ_APIS+=("${APIS_PKG}/${G}/${V}")
    GROUP_VERSIONS+=("${G}/${V}")
  done
done

if [ "${GENS}" = "all" ] || grep -qw "deepcopy" <<<"${GENS}"; then
  # Nuke existing files
  for dir in $(GO111MODULE=on go list -f '{{.Dir}}' "${FQ_APIS[@]}"); do
    pushd $dir >/dev/null
    git_find -z ':(glob)**'/zz_generated.deepcopy.go | xargs -0 rm -f
    popd >/dev/null
  done

  echo "Generating deepcopy funcs"
  "${gobin}/deepcopy-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      -O zz_generated.deepcopy \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "applyconfiguration" <<<"${GENS}"; then
  APPLYCONFIG_PKG="${APPLYCONFIGURATION_PKG_NAME:-applyconfiguration}"

  # Nuke existing files
  root="$(GO111MODULE=on go list -f '{{.Dir}}' "${OUTPUT_PKG}/${APPLYCONFIG_PKG}" 2>/dev/null || true)"
  if [ -n "${root}" ]; then
    pushd "${root}" >/dev/null
    git_grep -l --null \
      -e '^// Code generated by applyconfiguration-gen. DO NOT EDIT.$' \
      ':(glob)**/*.go' \
      | xargs -0 rm -f
    popd >/dev/null
  fi

  echo "Generating apply configuration for ${GROUPS_WITH_VERSIONS} at ${OUTPUT_PKG}/${APPLYCONFIG_PKG}"
  "${gobin}/applyconfiguration-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      --output-package "${OUTPUT_PKG}/${APPLYCONFIG_PKG}" \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "defaulter" <<<"${GENS}"; then
  # Nuke existing files
  for dir in $(GO111MODULE=on go list -f '{{.Dir}}' "${FQ_APIS[@]}"); do
    pushd $dir >/dev/null
    git_find -z ':(glob)**'/zz_generated.defaults.go | xargs -0 rm -f
    popd >/dev/null
  done

  echo "Generating defaulters"
  "${gobin}/defaulter-gen"  \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      -O zz_generated.defaults \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "conversion" <<<"${GENS}"; then
  # Nuke existing files
  for dir in $(GO111MODULE=on go list -f '{{.Dir}}' "${FQ_APIS[@]}"); do
    pushd $dir >/dev/null
    git_find -z ':(glob)**'/zz_generated.conversion.go | xargs -0 rm -f
    popd >/dev/null
  done

  echo "Generating conversions"
  "${gobin}/conversion-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      -O zz_generated.conversion \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "client" <<<"${GENS}"; then
  CLIENTSET_PKG="${CLIENTSET_PKG_NAME:-clientset}"
  CLIENTSET_NAME="${CLIENTSET_NAME_VERSIONED:-versioned}"

  # Nuke existing files
  root="$(GO111MODULE=on go list -f '{{.Dir}}' "${OUTPUT_PKG}/${CLIENTSET_PKG}/${CLIENTSET_NAME}" 2>/dev/null || true)"
  if [ -n "${root}" ]; then
    pushd "${root}" >/dev/null
    git_grep -l --null \
      -e '^// Code generated by client-gen. DO NOT EDIT.$' \
      ':(glob)**/*.go' \
      | xargs -0 rm -f
    popd >/dev/null
  fi

  echo "Generating clientset for ${GROUPS_WITH_VERSIONS} at ${OUTPUT_PKG}/${CLIENTSET_PKG}"
  if [ "${GENS}" = "all" ] || grep -qw "applyconfiguration" <<<"${GENS}"; then
    APPLY_CONFIGURATION_PACKAGE="${OUTPUT_PKG}/${APPLYCONFIGURATION_PKG_NAME:-applyconfiguration}"
  fi
  "${gobin}/client-gen" \
      --clientset-name "${CLIENTSET_NAME}" \
      --input-base "" \
      --input "$(codegen::join , "${FQ_APIS[@]}")" \
      --output-package "${OUTPUT_PKG}/${CLIENTSET_PKG}" \
      --apply-configuration-package "${APPLY_CONFIGURATION_PACKAGE:-}" \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "lister" <<<"${GENS}"; then
  # Nuke existing files
  for gv in "${GROUP_VERSIONS[@]}"; do
    root="$(GO111MODULE=on go list -f '{{.Dir}}' "${OUTPUT_PKG}/listers/${gv}" 2>/dev/null || true)"
    if [ -n "${root}" ]; then
      pushd "${root}" >/dev/null
      git_grep -l --null \
        -e '^// Code generated by lister-gen. DO NOT EDIT.$' \
        ':(glob)**/*.go' \
        | xargs -0 rm -f
      popd >/dev/null
    fi
  done

  echo "Generating listers for ${GROUPS_WITH_VERSIONS} at ${OUTPUT_PKG}/listers"
  "${gobin}/lister-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      --output-package "${OUTPUT_PKG}/listers" \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "informer" <<<"${GENS}"; then
  # Nuke existing files
  root="$(GO111MODULE=on go list -f '{{.Dir}}' "${OUTPUT_PKG}/informers/externalversions" 2>/dev/null || true)"
  if [ -n "${root}" ]; then
    pushd "${root}" >/dev/null
    git_grep -l --null \
      -e '^// Code generated by informer-gen. DO NOT EDIT.$' \
      ':(glob)**/*.go' \
      | xargs -0 rm -f
    popd >/dev/null
  fi

  echo "Generating informers for ${GROUPS_WITH_VERSIONS} at ${OUTPUT_PKG}/informers"
  "${gobin}/informer-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}")" \
      --versioned-clientset-package "${OUTPUT_PKG}/${CLIENTSET_PKG}/${CLIENTSET_NAME}" \
      --listers-package "${OUTPUT_PKG}/listers" \
      --output-package "${OUTPUT_PKG}/informers" \
      "$@"
fi

if [ "${GENS}" = "all" ] || grep -qw "openapi" <<<"${GENS}"; then
  # Nuke existing files
  for dir in $(GO111MODULE=on go list -f '{{.Dir}}' "${FQ_APIS[@]}"); do
    pushd $dir >/dev/null
    git_find -z ':(glob)**'/zz_generated.openapi.go | xargs -0 rm -f
    popd >/dev/null
  done

  echo "Generating OpenAPI definitions for ${GROUPS_WITH_VERSIONS} at ${OUTPUT_PKG}/openapi"
  declare -a OPENAPI_EXTRA_PACKAGES
  "${gobin}/openapi-gen" \
      --input-dirs "$(codegen::join , "${FQ_APIS[@]}" "${OPENAPI_EXTRA_PACKAGES[@]+"${OPENAPI_EXTRA_PACKAGES[@]}"}")" \
      --input-dirs "k8s.io/apimachinery/pkg/apis/meta/v1,k8s.io/apimachinery/pkg/runtime,k8s.io/apimachinery/pkg/version" \
      --output-package "${OUTPUT_PKG}/openapi" \
      -O zz_generated.openapi \
      "$@"
fi
