/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.allocation.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// IPAddress represents an IP used by Kubernetes associated to an IPRange.
// The name of the object is the IP address decimal number, because colons
// are not allowed and IPv6 addresses have different text representations.
// xref: https://tools.ietf.org/html/rfc4291
message IPAddress {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional IPAddressSpec spec = 2;

  // +optional
  optional IPAddressStatus status = 3;
}

// IPAddressList contains a list of IPAddress.
message IPAddressList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPAddress items = 2;
}

// IPAddressSpec describe the attributes in an IP Address,
message IPAddressSpec {
  // Address is the text representation of the IP Address.
  optional string address = 1;

  // IPRangeRef references the IPRange associated to this IP Address.
  // All IP addresses has to be associated to one IPRange allocator.
  optional IPRangeRef ipRangeRef = 2;
}

// IPAddressStatus defines the observed state of IPAddress.
message IPAddressStatus {
  optional string state = 1;
}

// IPRange defines a range of IPs using CIDR format (192.168.0.0/24 or 2001:db2::0/64).
message IPRange {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional IPRangeSpec spec = 2;

  // +optional
  optional IPRangeStatus status = 3;
}

// IPRangeList contains a list of IPRange objects.
message IPRangeList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPRange items = 2;
}

// IPRangeRef contains information that points to the IPRange being used so we can validate it
message IPRangeRef {
  // APIGroup is the group for the resource being referenced
  optional string apiGroup = 1;

  // Kind is the type of resource being referenced
  optional string kind = 2;

  // Name is the name of resource being referenced
  optional string name = 3;
}

// IPRangeSpec describe how the IPRange's specification looks like.
message IPRangeSpec {
  // Range of IPs in CIDR format (192.168.0.0/24 or 2001:db2::0/64).
  optional string range = 1;

  // Primary indicates if this is the primary allocator to be used by the
  // apiserver to allocate IP addresses.
  // NOTE this can simplify the Service strategy logic so we don't have to infer
  // the primary allocator, it also may allow to switch between primary families in
  // a cluster, but this looks like a loooong shot.
  // +optional
  optional bool primary = 2;
}

// IPRangeStatus defines the observed state of IPRange.
message IPRangeStatus {
  // Free represent the number of IP addresses that are not allocated in the Range.
  // +optional
  optional int64 free = 1;
}

