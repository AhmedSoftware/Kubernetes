/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.networking.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/networking/v1alpha1";

// CIDRConfig defines the CIDR and Mask size per IP Family(IPv4/IPv6).
message CIDRConfig {
  // An IP block in CIDR notation ("10.0.0.0/8", "fd12:3456:789a:1::/64").
  optional string cidr = 1;

  // PerNodeMaskSize is the mask size for node cidr.
  // IPv4/IPv6 Netmask size (e.g. 25 -> "/25" or 112 -> "/112") to allocate to a node.
  optional int32 perNodeMaskSize = 2;
}

// ClusterCIDRConfig is the Schema for the clustercidrconfigs API.
message ClusterCIDRConfig {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the ClusterCIDRConfig.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ClusterCIDRConfigSpec spec = 2;

  // Status is the current state of the ClusterCIDRConfig.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ClusterCIDRConfigStatus status = 3;
}

// ClusterCIDRConfigList contains a list of ClusterCIDRConfig.
message ClusterCIDRConfigList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ClusterCIDRConfigs.
  repeated ClusterCIDRConfig items = 2;
}

// ClusterCIDRConfigSpec defines the desired state of ClusterCIDRConfig.
message ClusterCIDRConfigSpec {
  // NodeSelector defines which nodes the config is applicable to.
  // An empty or nil NodeSelector functions as a default that applies to all nodes.
  // This field is immutable.
  // +optional
  optional k8s.io.api.core.v1.NodeSelector nodeSelector = 1;

  // IPv4 defines the IPv4 CIDR and the PerNodeMaskSize.
  // At least one of IPv4 or IPv6 must be provided. If both are
  // provided, the number of IPs allocated to each must be the same
  // (32 - ipv4.perNodeMaskSize).
  // This field is immutable.
  // +optional
  optional CIDRConfig ipv4 = 2;

  // IPv6 defines the IPv4 CIDR and the PerNodeMaskSize.
  // At least one of IPv4 or IPv6 must be provided. If both are
  // provided, the number of IPs allocated to each must be the same
  // (128 - ipv6.perNodeMaskSize).
  // This field is immutable.
  // +optional
  optional CIDRConfig ipv6 = 3;
}

// ClusterCIDRConfigStatus defines the observed state of ClusterCIDRConfig.
message ClusterCIDRConfigStatus {
}

