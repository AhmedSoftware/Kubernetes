/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.networking.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/networking/v1alpha1";

// ClusterCIDR represents a single configuration for per-Node Pod CIDR
// allocations when the MultiCIDRRangeAllocator is enabled (see the config for
// kube-controller-manager).  A cluster may have any number of ClusterCIDR
// resources, all of which will be considered when allocating a CIDR for a
// Node.  A ClusterCIDR is eligible to be used for a given Node when the node
// selector matches the node in question and has free CIDRs to allocate.  In
// case of multiple matching ClusterCIDR resources, the allocator will attempt
// to break ties using internal heuristics, but any ClusterCIDR whose node
// selector matches the Node may be used.
message ClusterCIDR {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the ClusterCIDR.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional ClusterCIDRSpec spec = 2;
}

// ClusterCIDRList contains a list of ClusterCIDR.
message ClusterCIDRList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ClusterCIDRs.
  repeated ClusterCIDR items = 2;
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
message ClusterCIDRSpec {
  // NodeSelector defines which nodes the config is applicable to.
  // An empty or nil NodeSelector selects all nodes.
  // This field is immutable.
  // +optional
  optional k8s.io.api.core.v1.NodeSelector nodeSelector = 1;

  // PerNodeHostBits defines the number of host bits to be configured per node.
  // A subnet mask determines how much of the address is used for network bits
  // and host bits. For example an IPv4 address of 192.168.0.0/24, splits the
  // address into 24 bits for the network portion and 8 bits for the host portion.
  // To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6).
  // Minimum value is 4 (16 IPs).
  // This field is immutable.
  // +required
  optional int32 perNodeHostBits = 2;

  // IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8").
  // At least one of IPv4 and IPv6 must be specified.
  // This field is immutable.
  // +optional
  optional string ipv4 = 3;

  // IPv6 defines an IPv6 IP block in CIDR notation(e.g. "2001:db8::/64").
  // At least one of IPv4 and IPv6 must be specified.
  // This field is immutable.
  // +optional
  optional string ipv6 = 4;
}

// IPAddress represents an IP used by Kubernetes associated to a ServiceCIDR.
// The name of the object is the IP address in canonical format.
message IPAddress {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional IPAddressSpec spec = 2;
}

// IPAddressList contains a list of IPAddress.
message IPAddressList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPAddress items = 2;
}

// IPAddressSpec describe the attributes in an IP Address,
message IPAddressSpec {
  // ParentRef references the resources (usually Services) that a IPAddress wants to be attached to.
  // +required
  optional ParentReference parentRef = 1;
}

message ParentReference {
  // Group is the group of the referent.
  // +optional
  optional string group = 1;

  // Kind is kind of the referent.
  // +optional
  optional string resource = 2;

  // Namespace is the namespace of the referent
  // +optional
  optional string namespace = 3;

  // Name is the name of the referent
  // +optional
  optional string name = 4;

  // UID is the uid of the referent
  // +optional
  optional string uid = 5;
}

// ServiceCIDR defines a range of IPs using CIDR format (192.168.0.0/24 or 2001:db2::0/64).
message ServiceCIDR {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional ServiceCIDRSpec spec = 2;
}

// ServiceCIDRList contains a list of ServiceCIDR objects.
message ServiceCIDRList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ServiceCIDR items = 2;
}

// ServiceCIDRSpec describe how the ServiceCIDR's specification looks like.
message ServiceCIDRSpec {
  // IPv4 defines an IPv4 IP block in CIDR notation(e.g. "192.168.0.0/24").
  // This field is immutable.
  // +optional
  optional string ipv4cidr = 1;

  // IPv6 defines an IPv6 IP block in CIDR notation(e.g. "fd12:3456:789a:1::/64").
  // This field is immutable.
  // +optional
  optional string ipv6cidr = 2;
}

