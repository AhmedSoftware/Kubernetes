apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: "2021-01-15T09:59:19Z"
  generation: 1
  labels:
    app: nginx
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:app: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:app: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app: {}
          f:spec:
            f:containers:
              k:{"name":"nginx"}:
                .: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kubectl-create
    operation: Update
    time: "2021-01-15T09:59:19Z"
  name: nginx
  namespace: default
  resourceVersion: "713"
  selfLink: /apis/apps/v1/namespaces/default/deployments/nginx
  uid: 4eb74ce6-4a24-461d-89dd-e8b2d7b3cea6
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      containers:
      - image: python:slim
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        command:
          - /bin/sh
          - -c
          - sleep 3 && python -m http.server 8080
          - 2>&1
        livenessProbe:
          failureThreshold: 3
          periodSeconds: 1
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 1
        startupProbe:
          failureThreshold: 5
          periodSeconds: 1
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 1
          initialDelaySeconds: 2
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
