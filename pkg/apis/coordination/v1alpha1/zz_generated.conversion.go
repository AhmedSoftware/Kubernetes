//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha1 "k8s.io/api/coordination/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	coordination "k8s.io/kubernetes/pkg/apis/coordination"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*v1alpha1.IdentityLease)(nil), (*coordination.IdentityLease)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_IdentityLease_To_coordination_IdentityLease(a.(*v1alpha1.IdentityLease), b.(*coordination.IdentityLease), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*coordination.IdentityLease)(nil), (*v1alpha1.IdentityLease)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_coordination_IdentityLease_To_v1alpha1_IdentityLease(a.(*coordination.IdentityLease), b.(*v1alpha1.IdentityLease), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.IdentityLeaseList)(nil), (*coordination.IdentityLeaseList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_IdentityLeaseList_To_coordination_IdentityLeaseList(a.(*v1alpha1.IdentityLeaseList), b.(*coordination.IdentityLeaseList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*coordination.IdentityLeaseList)(nil), (*v1alpha1.IdentityLeaseList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_coordination_IdentityLeaseList_To_v1alpha1_IdentityLeaseList(a.(*coordination.IdentityLeaseList), b.(*v1alpha1.IdentityLeaseList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.IdentityLeaseSpec)(nil), (*coordination.IdentityLeaseSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec(a.(*v1alpha1.IdentityLeaseSpec), b.(*coordination.IdentityLeaseSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*coordination.IdentityLeaseSpec)(nil), (*v1alpha1.IdentityLeaseSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec(a.(*coordination.IdentityLeaseSpec), b.(*v1alpha1.IdentityLeaseSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_IdentityLease_To_coordination_IdentityLease(in *v1alpha1.IdentityLease, out *coordination.IdentityLease, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_IdentityLease_To_coordination_IdentityLease is an autogenerated conversion function.
func Convert_v1alpha1_IdentityLease_To_coordination_IdentityLease(in *v1alpha1.IdentityLease, out *coordination.IdentityLease, s conversion.Scope) error {
	return autoConvert_v1alpha1_IdentityLease_To_coordination_IdentityLease(in, out, s)
}

func autoConvert_coordination_IdentityLease_To_v1alpha1_IdentityLease(in *coordination.IdentityLease, out *v1alpha1.IdentityLease, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_coordination_IdentityLease_To_v1alpha1_IdentityLease is an autogenerated conversion function.
func Convert_coordination_IdentityLease_To_v1alpha1_IdentityLease(in *coordination.IdentityLease, out *v1alpha1.IdentityLease, s conversion.Scope) error {
	return autoConvert_coordination_IdentityLease_To_v1alpha1_IdentityLease(in, out, s)
}

func autoConvert_v1alpha1_IdentityLeaseList_To_coordination_IdentityLeaseList(in *v1alpha1.IdentityLeaseList, out *coordination.IdentityLeaseList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]coordination.IdentityLease)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_IdentityLeaseList_To_coordination_IdentityLeaseList is an autogenerated conversion function.
func Convert_v1alpha1_IdentityLeaseList_To_coordination_IdentityLeaseList(in *v1alpha1.IdentityLeaseList, out *coordination.IdentityLeaseList, s conversion.Scope) error {
	return autoConvert_v1alpha1_IdentityLeaseList_To_coordination_IdentityLeaseList(in, out, s)
}

func autoConvert_coordination_IdentityLeaseList_To_v1alpha1_IdentityLeaseList(in *coordination.IdentityLeaseList, out *v1alpha1.IdentityLeaseList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]v1alpha1.IdentityLease)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_coordination_IdentityLeaseList_To_v1alpha1_IdentityLeaseList is an autogenerated conversion function.
func Convert_coordination_IdentityLeaseList_To_v1alpha1_IdentityLeaseList(in *coordination.IdentityLeaseList, out *v1alpha1.IdentityLeaseList, s conversion.Scope) error {
	return autoConvert_coordination_IdentityLeaseList_To_v1alpha1_IdentityLeaseList(in, out, s)
}

func autoConvert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec(in *v1alpha1.IdentityLeaseSpec, out *coordination.IdentityLeaseSpec, s conversion.Scope) error {
	out.BinaryVersion = in.BinaryVersion
	out.CompatibilityVersion = in.CompatibilityVersion
	out.CanLeadLease = in.CanLeadLease
	out.HolderIdentity = (*string)(unsafe.Pointer(in.HolderIdentity))
	out.LeaseDurationSeconds = (*int32)(unsafe.Pointer(in.LeaseDurationSeconds))
	out.AcquireTime = (*v1.MicroTime)(unsafe.Pointer(in.AcquireTime))
	out.RenewTime = (*v1.MicroTime)(unsafe.Pointer(in.RenewTime))
	return nil
}

// Convert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec is an autogenerated conversion function.
func Convert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec(in *v1alpha1.IdentityLeaseSpec, out *coordination.IdentityLeaseSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_IdentityLeaseSpec_To_coordination_IdentityLeaseSpec(in, out, s)
}

func autoConvert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec(in *coordination.IdentityLeaseSpec, out *v1alpha1.IdentityLeaseSpec, s conversion.Scope) error {
	out.BinaryVersion = in.BinaryVersion
	out.CompatibilityVersion = in.CompatibilityVersion
	out.CanLeadLease = in.CanLeadLease
	out.HolderIdentity = (*string)(unsafe.Pointer(in.HolderIdentity))
	out.LeaseDurationSeconds = (*int32)(unsafe.Pointer(in.LeaseDurationSeconds))
	out.AcquireTime = (*v1.MicroTime)(unsafe.Pointer(in.AcquireTime))
	out.RenewTime = (*v1.MicroTime)(unsafe.Pointer(in.RenewTime))
	return nil
}

// Convert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec is an autogenerated conversion function.
func Convert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec(in *coordination.IdentityLeaseSpec, out *v1alpha1.IdentityLeaseSpec, s conversion.Scope) error {
	return autoConvert_coordination_IdentityLeaseSpec_To_v1alpha1_IdentityLeaseSpec(in, out, s)
}
