//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by defaulter-gen. DO NOT EDIT.

package v1

import (
	"encoding/json"

	v1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	apiscorev1 "k8s.io/kubernetes/pkg/apis/core/v1"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&v1.DaemonSet{}, func(obj interface{}) { SetObjectDefaults_DaemonSet(obj.(*v1.DaemonSet)) })
	scheme.AddTypeDefaultingFunc(&v1.DaemonSetList{}, func(obj interface{}) { SetObjectDefaults_DaemonSetList(obj.(*v1.DaemonSetList)) })
	scheme.AddTypeDefaultingFunc(&v1.Deployment{}, func(obj interface{}) { SetObjectDefaults_Deployment(obj.(*v1.Deployment)) })
	scheme.AddTypeDefaultingFunc(&v1.DeploymentList{}, func(obj interface{}) { SetObjectDefaults_DeploymentList(obj.(*v1.DeploymentList)) })
	scheme.AddTypeDefaultingFunc(&v1.ReplicaSet{}, func(obj interface{}) { SetObjectDefaults_ReplicaSet(obj.(*v1.ReplicaSet)) })
	scheme.AddTypeDefaultingFunc(&v1.ReplicaSetList{}, func(obj interface{}) { SetObjectDefaults_ReplicaSetList(obj.(*v1.ReplicaSetList)) })
	scheme.AddTypeDefaultingFunc(&v1.StatefulSet{}, func(obj interface{}) { SetObjectDefaults_StatefulSet(obj.(*v1.StatefulSet)) })
	scheme.AddTypeDefaultingFunc(&v1.StatefulSetList{}, func(obj interface{}) { SetObjectDefaults_StatefulSetList(obj.(*v1.StatefulSetList)) })
	return nil
}

func SetObjectDefaults_DaemonSet(in *v1.DaemonSet) {
	SetDefaults_DaemonSet(in)
	apiscorev1.SetDefaults_PodSpec(&in.Spec.Template.Spec)
	for i := range in.Spec.Template.Spec.Volumes {
		a := &in.Spec.Template.Spec.Volumes[i]
		apiscorev1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
			apiscorev1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
			if a.VolumeSource.HostPath.Type == nil {
				ptrVar1 := corev1.HostPathType(corev1.HostPathUnset)
				a.VolumeSource.HostPath.Type = &ptrVar1
			}
		}
		if a.VolumeSource.Secret != nil {
			apiscorev1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			if a.VolumeSource.Secret.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Secret.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ISCSI != nil {
			apiscorev1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.ISCSIInterface == "" {
				a.VolumeSource.ISCSI.ISCSIInterface = "default"
			}
		}
		if a.VolumeSource.RBD != nil {
			apiscorev1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
			if a.VolumeSource.RBD.RBDPool == "" {
				a.VolumeSource.RBD.RBDPool = "rbd"
			}
			if a.VolumeSource.RBD.RadosUser == "" {
				a.VolumeSource.RBD.RadosUser = "admin"
			}
			if a.VolumeSource.RBD.Keyring == "" {
				a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
			}
		}
		if a.VolumeSource.DownwardAPI != nil {
			apiscorev1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.FieldRef)
					if b.FieldRef.APIVersion == "" {
						b.FieldRef.APIVersion = "v1"
					}
				}
			}
			if a.VolumeSource.DownwardAPI.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.DownwardAPI.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ConfigMap != nil {
			apiscorev1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
			if a.VolumeSource.ConfigMap.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.ConfigMap.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.AzureDisk != nil {
			apiscorev1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode == nil {
				ptrVar1 := corev1.AzureDataDiskCachingMode(corev1.AzureDataDiskCachingReadWrite)
				a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.FSType == nil {
				var ptrVar1 string = "ext4"
				a.VolumeSource.AzureDisk.FSType = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.ReadOnly == nil {
				var ptrVar1 bool = false
				a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.Kind == nil {
				ptrVar1 := corev1.AzureDataDiskKind(corev1.AzureSharedBlobDisk)
				a.VolumeSource.AzureDisk.Kind = &ptrVar1
			}
		}
		if a.VolumeSource.Projected != nil {
			apiscorev1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.DownwardAPI != nil {
					for k := range b.DownwardAPI.Items {
						c := &b.DownwardAPI.Items[k]
						if c.FieldRef != nil {
							apiscorev1.SetDefaults_ObjectFieldSelector(c.FieldRef)
							if c.FieldRef.APIVersion == "" {
								c.FieldRef.APIVersion = "v1"
							}
						}
					}
				}
				if b.ServiceAccountToken != nil {
					apiscorev1.SetDefaults_ServiceAccountTokenProjection(b.ServiceAccountToken)
					if b.ServiceAccountToken.ExpirationSeconds == nil {
						var ptrVar1 int64 = 3600
						b.ServiceAccountToken.ExpirationSeconds = &ptrVar1
					}
				}
			}
			if a.VolumeSource.Projected.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Projected.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ScaleIO != nil {
			apiscorev1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
			if a.VolumeSource.ScaleIO.StorageMode == "" {
				a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
			}
			if a.VolumeSource.ScaleIO.FSType == "" {
				a.VolumeSource.ScaleIO.FSType = "xfs"
			}
		}
		if a.VolumeSource.Ephemeral != nil {
			if a.VolumeSource.Ephemeral.VolumeClaimTemplate != nil {
				apiscorev1.SetDefaults_PersistentVolumeClaimSpec(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Limits)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Requests)
				if a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode == nil {
					ptrVar1 := corev1.PersistentVolumeMode(corev1.PersistentVolumeFilesystem)
					a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode = &ptrVar1
				}
			}
		}
	}
	for i := range in.Spec.Template.Spec.InitContainers {
		a := &in.Spec.Template.Spec.InitContainers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.Containers {
		a := &in.Spec.Template.Spec.Containers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.EphemeralContainers {
		a := &in.Spec.Template.Spec.EphemeralContainers[i]
		apiscorev1.SetDefaults_EphemeralContainer(a)
		for j := range a.EphemeralContainerCommon.Ports {
			b := &a.EphemeralContainerCommon.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.EphemeralContainerCommon.Env {
			b := &a.EphemeralContainerCommon.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Requests)
		if a.EphemeralContainerCommon.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.LivenessProbe)
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.ReadinessProbe)
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.StartupProbe)
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.StartupProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.Lifecycle != nil {
			if a.EphemeralContainerCommon.Lifecycle.PostStart != nil {
				if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.EphemeralContainerCommon.Lifecycle.PreStop != nil {
				if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.EphemeralContainerCommon.TerminationMessagePath == "" {
			a.EphemeralContainerCommon.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.EphemeralContainerCommon.TerminationMessagePolicy == "" {
			a.EphemeralContainerCommon.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	if in.Spec.Template.Spec.RestartPolicy == "" {
		in.Spec.Template.Spec.RestartPolicy = corev1.RestartPolicy(corev1.RestartPolicyAlways)
	}
	if in.Spec.Template.Spec.TerminationGracePeriodSeconds == nil {
		ptrVar1 := int64(corev1.DefaultTerminationGracePeriodSeconds)
		in.Spec.Template.Spec.TerminationGracePeriodSeconds = &ptrVar1
	}
	if in.Spec.Template.Spec.DNSPolicy == "" {
		in.Spec.Template.Spec.DNSPolicy = corev1.DNSPolicy(corev1.DNSClusterFirst)
	}
	if in.Spec.Template.Spec.SecurityContext == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.Spec.Template.Spec.SecurityContext); err != nil {
			panic(err)
		}
	}
	if in.Spec.Template.Spec.SchedulerName == "" {
		in.Spec.Template.Spec.SchedulerName = string(corev1.DefaultSchedulerName)
	}
	if in.Spec.Template.Spec.EnableServiceLinks == nil {
		ptrVar1 := bool(corev1.DefaultEnableServiceLinks)
		in.Spec.Template.Spec.EnableServiceLinks = &ptrVar1
	}
	apiscorev1.SetDefaults_ResourceList(&in.Spec.Template.Spec.Overhead)
	if in.Spec.UpdateStrategy.Type == "" {
		in.Spec.UpdateStrategy.Type = v1.DaemonSetUpdateStrategyType(v1.RollingUpdateDaemonSetStrategyType)
	}
	if in.Spec.UpdateStrategy.RollingUpdate != nil {
		if in.Spec.UpdateStrategy.RollingUpdate.MaxUnavailable == nil {
			if err := json.Unmarshal([]byte(`1`), &in.Spec.UpdateStrategy.RollingUpdate.MaxUnavailable); err != nil {
				panic(err)
			}
		}
		if in.Spec.UpdateStrategy.RollingUpdate.MaxSurge == nil {
			if err := json.Unmarshal([]byte(`0`), &in.Spec.UpdateStrategy.RollingUpdate.MaxSurge); err != nil {
				panic(err)
			}
		}
	}
	if in.Spec.RevisionHistoryLimit == nil {
		var ptrVar1 int32 = 10
		in.Spec.RevisionHistoryLimit = &ptrVar1
	}
}

func SetObjectDefaults_DaemonSetList(in *v1.DaemonSetList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_DaemonSet(a)
	}
}

func SetObjectDefaults_Deployment(in *v1.Deployment) {
	SetDefaults_Deployment(in)
	if in.Spec.Replicas == nil {
		var ptrVar1 int32 = 1
		in.Spec.Replicas = &ptrVar1
	}
	apiscorev1.SetDefaults_PodSpec(&in.Spec.Template.Spec)
	for i := range in.Spec.Template.Spec.Volumes {
		a := &in.Spec.Template.Spec.Volumes[i]
		apiscorev1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
			apiscorev1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
			if a.VolumeSource.HostPath.Type == nil {
				ptrVar1 := corev1.HostPathType(corev1.HostPathUnset)
				a.VolumeSource.HostPath.Type = &ptrVar1
			}
		}
		if a.VolumeSource.Secret != nil {
			apiscorev1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			if a.VolumeSource.Secret.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Secret.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ISCSI != nil {
			apiscorev1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.ISCSIInterface == "" {
				a.VolumeSource.ISCSI.ISCSIInterface = "default"
			}
		}
		if a.VolumeSource.RBD != nil {
			apiscorev1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
			if a.VolumeSource.RBD.RBDPool == "" {
				a.VolumeSource.RBD.RBDPool = "rbd"
			}
			if a.VolumeSource.RBD.RadosUser == "" {
				a.VolumeSource.RBD.RadosUser = "admin"
			}
			if a.VolumeSource.RBD.Keyring == "" {
				a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
			}
		}
		if a.VolumeSource.DownwardAPI != nil {
			apiscorev1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.FieldRef)
					if b.FieldRef.APIVersion == "" {
						b.FieldRef.APIVersion = "v1"
					}
				}
			}
			if a.VolumeSource.DownwardAPI.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.DownwardAPI.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ConfigMap != nil {
			apiscorev1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
			if a.VolumeSource.ConfigMap.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.ConfigMap.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.AzureDisk != nil {
			apiscorev1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode == nil {
				ptrVar1 := corev1.AzureDataDiskCachingMode(corev1.AzureDataDiskCachingReadWrite)
				a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.FSType == nil {
				var ptrVar1 string = "ext4"
				a.VolumeSource.AzureDisk.FSType = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.ReadOnly == nil {
				var ptrVar1 bool = false
				a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.Kind == nil {
				ptrVar1 := corev1.AzureDataDiskKind(corev1.AzureSharedBlobDisk)
				a.VolumeSource.AzureDisk.Kind = &ptrVar1
			}
		}
		if a.VolumeSource.Projected != nil {
			apiscorev1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.DownwardAPI != nil {
					for k := range b.DownwardAPI.Items {
						c := &b.DownwardAPI.Items[k]
						if c.FieldRef != nil {
							apiscorev1.SetDefaults_ObjectFieldSelector(c.FieldRef)
							if c.FieldRef.APIVersion == "" {
								c.FieldRef.APIVersion = "v1"
							}
						}
					}
				}
				if b.ServiceAccountToken != nil {
					apiscorev1.SetDefaults_ServiceAccountTokenProjection(b.ServiceAccountToken)
					if b.ServiceAccountToken.ExpirationSeconds == nil {
						var ptrVar1 int64 = 3600
						b.ServiceAccountToken.ExpirationSeconds = &ptrVar1
					}
				}
			}
			if a.VolumeSource.Projected.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Projected.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ScaleIO != nil {
			apiscorev1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
			if a.VolumeSource.ScaleIO.StorageMode == "" {
				a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
			}
			if a.VolumeSource.ScaleIO.FSType == "" {
				a.VolumeSource.ScaleIO.FSType = "xfs"
			}
		}
		if a.VolumeSource.Ephemeral != nil {
			if a.VolumeSource.Ephemeral.VolumeClaimTemplate != nil {
				apiscorev1.SetDefaults_PersistentVolumeClaimSpec(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Limits)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Requests)
				if a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode == nil {
					ptrVar1 := corev1.PersistentVolumeMode(corev1.PersistentVolumeFilesystem)
					a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode = &ptrVar1
				}
			}
		}
	}
	for i := range in.Spec.Template.Spec.InitContainers {
		a := &in.Spec.Template.Spec.InitContainers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.Containers {
		a := &in.Spec.Template.Spec.Containers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.EphemeralContainers {
		a := &in.Spec.Template.Spec.EphemeralContainers[i]
		apiscorev1.SetDefaults_EphemeralContainer(a)
		for j := range a.EphemeralContainerCommon.Ports {
			b := &a.EphemeralContainerCommon.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.EphemeralContainerCommon.Env {
			b := &a.EphemeralContainerCommon.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Requests)
		if a.EphemeralContainerCommon.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.LivenessProbe)
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.ReadinessProbe)
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.StartupProbe)
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.StartupProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.Lifecycle != nil {
			if a.EphemeralContainerCommon.Lifecycle.PostStart != nil {
				if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.EphemeralContainerCommon.Lifecycle.PreStop != nil {
				if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.EphemeralContainerCommon.TerminationMessagePath == "" {
			a.EphemeralContainerCommon.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.EphemeralContainerCommon.TerminationMessagePolicy == "" {
			a.EphemeralContainerCommon.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	if in.Spec.Template.Spec.RestartPolicy == "" {
		in.Spec.Template.Spec.RestartPolicy = corev1.RestartPolicy(corev1.RestartPolicyAlways)
	}
	if in.Spec.Template.Spec.TerminationGracePeriodSeconds == nil {
		ptrVar1 := int64(corev1.DefaultTerminationGracePeriodSeconds)
		in.Spec.Template.Spec.TerminationGracePeriodSeconds = &ptrVar1
	}
	if in.Spec.Template.Spec.DNSPolicy == "" {
		in.Spec.Template.Spec.DNSPolicy = corev1.DNSPolicy(corev1.DNSClusterFirst)
	}
	if in.Spec.Template.Spec.SecurityContext == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.Spec.Template.Spec.SecurityContext); err != nil {
			panic(err)
		}
	}
	if in.Spec.Template.Spec.SchedulerName == "" {
		in.Spec.Template.Spec.SchedulerName = string(corev1.DefaultSchedulerName)
	}
	if in.Spec.Template.Spec.EnableServiceLinks == nil {
		ptrVar1 := bool(corev1.DefaultEnableServiceLinks)
		in.Spec.Template.Spec.EnableServiceLinks = &ptrVar1
	}
	apiscorev1.SetDefaults_ResourceList(&in.Spec.Template.Spec.Overhead)
	if in.Spec.Strategy.Type == "" {
		in.Spec.Strategy.Type = v1.DeploymentStrategyType(v1.RollingUpdateDeploymentStrategyType)
	}
	if in.Spec.RevisionHistoryLimit == nil {
		var ptrVar1 int32 = 10
		in.Spec.RevisionHistoryLimit = &ptrVar1
	}
	if in.Spec.ProgressDeadlineSeconds == nil {
		var ptrVar1 int32 = 600
		in.Spec.ProgressDeadlineSeconds = &ptrVar1
	}
}

func SetObjectDefaults_DeploymentList(in *v1.DeploymentList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Deployment(a)
	}
}

func SetObjectDefaults_ReplicaSet(in *v1.ReplicaSet) {
	SetDefaults_ReplicaSet(in)
	if in.Spec.Replicas == nil {
		var ptrVar1 int32 = 1
		in.Spec.Replicas = &ptrVar1
	}
	apiscorev1.SetDefaults_PodSpec(&in.Spec.Template.Spec)
	for i := range in.Spec.Template.Spec.Volumes {
		a := &in.Spec.Template.Spec.Volumes[i]
		apiscorev1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
			apiscorev1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
			if a.VolumeSource.HostPath.Type == nil {
				ptrVar1 := corev1.HostPathType(corev1.HostPathUnset)
				a.VolumeSource.HostPath.Type = &ptrVar1
			}
		}
		if a.VolumeSource.Secret != nil {
			apiscorev1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			if a.VolumeSource.Secret.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Secret.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ISCSI != nil {
			apiscorev1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.ISCSIInterface == "" {
				a.VolumeSource.ISCSI.ISCSIInterface = "default"
			}
		}
		if a.VolumeSource.RBD != nil {
			apiscorev1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
			if a.VolumeSource.RBD.RBDPool == "" {
				a.VolumeSource.RBD.RBDPool = "rbd"
			}
			if a.VolumeSource.RBD.RadosUser == "" {
				a.VolumeSource.RBD.RadosUser = "admin"
			}
			if a.VolumeSource.RBD.Keyring == "" {
				a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
			}
		}
		if a.VolumeSource.DownwardAPI != nil {
			apiscorev1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.FieldRef)
					if b.FieldRef.APIVersion == "" {
						b.FieldRef.APIVersion = "v1"
					}
				}
			}
			if a.VolumeSource.DownwardAPI.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.DownwardAPI.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ConfigMap != nil {
			apiscorev1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
			if a.VolumeSource.ConfigMap.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.ConfigMap.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.AzureDisk != nil {
			apiscorev1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode == nil {
				ptrVar1 := corev1.AzureDataDiskCachingMode(corev1.AzureDataDiskCachingReadWrite)
				a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.FSType == nil {
				var ptrVar1 string = "ext4"
				a.VolumeSource.AzureDisk.FSType = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.ReadOnly == nil {
				var ptrVar1 bool = false
				a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.Kind == nil {
				ptrVar1 := corev1.AzureDataDiskKind(corev1.AzureSharedBlobDisk)
				a.VolumeSource.AzureDisk.Kind = &ptrVar1
			}
		}
		if a.VolumeSource.Projected != nil {
			apiscorev1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.DownwardAPI != nil {
					for k := range b.DownwardAPI.Items {
						c := &b.DownwardAPI.Items[k]
						if c.FieldRef != nil {
							apiscorev1.SetDefaults_ObjectFieldSelector(c.FieldRef)
							if c.FieldRef.APIVersion == "" {
								c.FieldRef.APIVersion = "v1"
							}
						}
					}
				}
				if b.ServiceAccountToken != nil {
					apiscorev1.SetDefaults_ServiceAccountTokenProjection(b.ServiceAccountToken)
					if b.ServiceAccountToken.ExpirationSeconds == nil {
						var ptrVar1 int64 = 3600
						b.ServiceAccountToken.ExpirationSeconds = &ptrVar1
					}
				}
			}
			if a.VolumeSource.Projected.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Projected.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ScaleIO != nil {
			apiscorev1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
			if a.VolumeSource.ScaleIO.StorageMode == "" {
				a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
			}
			if a.VolumeSource.ScaleIO.FSType == "" {
				a.VolumeSource.ScaleIO.FSType = "xfs"
			}
		}
		if a.VolumeSource.Ephemeral != nil {
			if a.VolumeSource.Ephemeral.VolumeClaimTemplate != nil {
				apiscorev1.SetDefaults_PersistentVolumeClaimSpec(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Limits)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Requests)
				if a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode == nil {
					ptrVar1 := corev1.PersistentVolumeMode(corev1.PersistentVolumeFilesystem)
					a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode = &ptrVar1
				}
			}
		}
	}
	for i := range in.Spec.Template.Spec.InitContainers {
		a := &in.Spec.Template.Spec.InitContainers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.Containers {
		a := &in.Spec.Template.Spec.Containers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.EphemeralContainers {
		a := &in.Spec.Template.Spec.EphemeralContainers[i]
		apiscorev1.SetDefaults_EphemeralContainer(a)
		for j := range a.EphemeralContainerCommon.Ports {
			b := &a.EphemeralContainerCommon.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.EphemeralContainerCommon.Env {
			b := &a.EphemeralContainerCommon.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Requests)
		if a.EphemeralContainerCommon.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.LivenessProbe)
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.ReadinessProbe)
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.StartupProbe)
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.StartupProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.Lifecycle != nil {
			if a.EphemeralContainerCommon.Lifecycle.PostStart != nil {
				if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.EphemeralContainerCommon.Lifecycle.PreStop != nil {
				if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.EphemeralContainerCommon.TerminationMessagePath == "" {
			a.EphemeralContainerCommon.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.EphemeralContainerCommon.TerminationMessagePolicy == "" {
			a.EphemeralContainerCommon.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	if in.Spec.Template.Spec.RestartPolicy == "" {
		in.Spec.Template.Spec.RestartPolicy = corev1.RestartPolicy(corev1.RestartPolicyAlways)
	}
	if in.Spec.Template.Spec.TerminationGracePeriodSeconds == nil {
		ptrVar1 := int64(corev1.DefaultTerminationGracePeriodSeconds)
		in.Spec.Template.Spec.TerminationGracePeriodSeconds = &ptrVar1
	}
	if in.Spec.Template.Spec.DNSPolicy == "" {
		in.Spec.Template.Spec.DNSPolicy = corev1.DNSPolicy(corev1.DNSClusterFirst)
	}
	if in.Spec.Template.Spec.SecurityContext == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.Spec.Template.Spec.SecurityContext); err != nil {
			panic(err)
		}
	}
	if in.Spec.Template.Spec.SchedulerName == "" {
		in.Spec.Template.Spec.SchedulerName = string(corev1.DefaultSchedulerName)
	}
	if in.Spec.Template.Spec.EnableServiceLinks == nil {
		ptrVar1 := bool(corev1.DefaultEnableServiceLinks)
		in.Spec.Template.Spec.EnableServiceLinks = &ptrVar1
	}
	apiscorev1.SetDefaults_ResourceList(&in.Spec.Template.Spec.Overhead)
}

func SetObjectDefaults_ReplicaSetList(in *v1.ReplicaSetList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_ReplicaSet(a)
	}
}

func SetObjectDefaults_StatefulSet(in *v1.StatefulSet) {
	SetDefaults_StatefulSet(in)
	if in.Spec.Replicas == nil {
		var ptrVar1 int32 = 1
		in.Spec.Replicas = &ptrVar1
	}
	apiscorev1.SetDefaults_PodSpec(&in.Spec.Template.Spec)
	for i := range in.Spec.Template.Spec.Volumes {
		a := &in.Spec.Template.Spec.Volumes[i]
		apiscorev1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
			apiscorev1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
			if a.VolumeSource.HostPath.Type == nil {
				ptrVar1 := corev1.HostPathType(corev1.HostPathUnset)
				a.VolumeSource.HostPath.Type = &ptrVar1
			}
		}
		if a.VolumeSource.Secret != nil {
			apiscorev1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			if a.VolumeSource.Secret.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Secret.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ISCSI != nil {
			apiscorev1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.ISCSIInterface == "" {
				a.VolumeSource.ISCSI.ISCSIInterface = "default"
			}
		}
		if a.VolumeSource.RBD != nil {
			apiscorev1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
			if a.VolumeSource.RBD.RBDPool == "" {
				a.VolumeSource.RBD.RBDPool = "rbd"
			}
			if a.VolumeSource.RBD.RadosUser == "" {
				a.VolumeSource.RBD.RadosUser = "admin"
			}
			if a.VolumeSource.RBD.Keyring == "" {
				a.VolumeSource.RBD.Keyring = "/etc/ceph/keyring"
			}
		}
		if a.VolumeSource.DownwardAPI != nil {
			apiscorev1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.FieldRef)
					if b.FieldRef.APIVersion == "" {
						b.FieldRef.APIVersion = "v1"
					}
				}
			}
			if a.VolumeSource.DownwardAPI.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.DownwardAPI.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ConfigMap != nil {
			apiscorev1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
			if a.VolumeSource.ConfigMap.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.ConfigMap.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.AzureDisk != nil {
			apiscorev1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode == nil {
				ptrVar1 := corev1.AzureDataDiskCachingMode(corev1.AzureDataDiskCachingReadWrite)
				a.VolumeSource.AzureDisk.CachingMode = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.FSType == nil {
				var ptrVar1 string = "ext4"
				a.VolumeSource.AzureDisk.FSType = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.ReadOnly == nil {
				var ptrVar1 bool = false
				a.VolumeSource.AzureDisk.ReadOnly = &ptrVar1
			}
			if a.VolumeSource.AzureDisk.Kind == nil {
				ptrVar1 := corev1.AzureDataDiskKind(corev1.AzureSharedBlobDisk)
				a.VolumeSource.AzureDisk.Kind = &ptrVar1
			}
		}
		if a.VolumeSource.Projected != nil {
			apiscorev1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.DownwardAPI != nil {
					for k := range b.DownwardAPI.Items {
						c := &b.DownwardAPI.Items[k]
						if c.FieldRef != nil {
							apiscorev1.SetDefaults_ObjectFieldSelector(c.FieldRef)
							if c.FieldRef.APIVersion == "" {
								c.FieldRef.APIVersion = "v1"
							}
						}
					}
				}
				if b.ServiceAccountToken != nil {
					apiscorev1.SetDefaults_ServiceAccountTokenProjection(b.ServiceAccountToken)
					if b.ServiceAccountToken.ExpirationSeconds == nil {
						var ptrVar1 int64 = 3600
						b.ServiceAccountToken.ExpirationSeconds = &ptrVar1
					}
				}
			}
			if a.VolumeSource.Projected.DefaultMode == nil {
				var ptrVar1 int32 = 420
				a.VolumeSource.Projected.DefaultMode = &ptrVar1
			}
		}
		if a.VolumeSource.ScaleIO != nil {
			apiscorev1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
			if a.VolumeSource.ScaleIO.StorageMode == "" {
				a.VolumeSource.ScaleIO.StorageMode = "ThinProvisioned"
			}
			if a.VolumeSource.ScaleIO.FSType == "" {
				a.VolumeSource.ScaleIO.FSType = "xfs"
			}
		}
		if a.VolumeSource.Ephemeral != nil {
			if a.VolumeSource.Ephemeral.VolumeClaimTemplate != nil {
				apiscorev1.SetDefaults_PersistentVolumeClaimSpec(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Limits)
				apiscorev1.SetDefaults_ResourceList(&a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.Resources.Requests)
				if a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode == nil {
					ptrVar1 := corev1.PersistentVolumeMode(corev1.PersistentVolumeFilesystem)
					a.VolumeSource.Ephemeral.VolumeClaimTemplate.Spec.VolumeMode = &ptrVar1
				}
			}
		}
	}
	for i := range in.Spec.Template.Spec.InitContainers {
		a := &in.Spec.Template.Spec.InitContainers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.Containers {
		a := &in.Spec.Template.Spec.Containers[i]
		apiscorev1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Resources.Requests)
		if a.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.LivenessProbe.ProbeHandler.HTTPGet)
				if a.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.LivenessProbe.TimeoutSeconds == 0 {
				a.LivenessProbe.TimeoutSeconds = 1
			}
			if a.LivenessProbe.PeriodSeconds == 0 {
				a.LivenessProbe.PeriodSeconds = 10
			}
			if a.LivenessProbe.SuccessThreshold == 0 {
				a.LivenessProbe.SuccessThreshold = 1
			}
			if a.LivenessProbe.FailureThreshold == 0 {
				a.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.ReadinessProbe)
			if a.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.ReadinessProbe.TimeoutSeconds == 0 {
				a.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.ReadinessProbe.PeriodSeconds == 0 {
				a.ReadinessProbe.PeriodSeconds = 10
			}
			if a.ReadinessProbe.SuccessThreshold == 0 {
				a.ReadinessProbe.SuccessThreshold = 1
			}
			if a.ReadinessProbe.FailureThreshold == 0 {
				a.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.StartupProbe)
			if a.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.StartupProbe.ProbeHandler.HTTPGet)
				if a.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.StartupProbe.ProbeHandler.GRPC != nil {
				if a.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.StartupProbe.TimeoutSeconds == 0 {
				a.StartupProbe.TimeoutSeconds = 1
			}
			if a.StartupProbe.PeriodSeconds == 0 {
				a.StartupProbe.PeriodSeconds = 10
			}
			if a.StartupProbe.SuccessThreshold == 0 {
				a.StartupProbe.SuccessThreshold = 1
			}
			if a.StartupProbe.FailureThreshold == 0 {
				a.StartupProbe.FailureThreshold = 3
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
				if a.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
					if a.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.Lifecycle.PreStop != nil {
				if a.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
					if a.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.TerminationMessagePath == "" {
			a.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.TerminationMessagePolicy == "" {
			a.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	for i := range in.Spec.Template.Spec.EphemeralContainers {
		a := &in.Spec.Template.Spec.EphemeralContainers[i]
		apiscorev1.SetDefaults_EphemeralContainer(a)
		for j := range a.EphemeralContainerCommon.Ports {
			b := &a.EphemeralContainerCommon.Ports[j]
			if b.Protocol == "" {
				b.Protocol = "TCP"
			}
		}
		for j := range a.EphemeralContainerCommon.Env {
			b := &a.EphemeralContainerCommon.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.FieldRef != nil {
					apiscorev1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
					if b.ValueFrom.FieldRef.APIVersion == "" {
						b.ValueFrom.FieldRef.APIVersion = "v1"
					}
				}
			}
		}
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.EphemeralContainerCommon.Resources.Requests)
		if a.EphemeralContainerCommon.LivenessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.LivenessProbe)
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.LivenessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.LivenessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.LivenessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.LivenessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.ReadinessProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.ReadinessProbe)
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.ReadinessProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.ReadinessProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.StartupProbe != nil {
			apiscorev1.SetDefaults_Probe(a.EphemeralContainerCommon.StartupProbe)
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet != nil {
				apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet)
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Path = "/"
				}
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme == "" {
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC != nil {
				if a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service == nil {
					var ptrVar1 string = ""
					a.EphemeralContainerCommon.StartupProbe.ProbeHandler.GRPC.Service = &ptrVar1
				}
			}
			if a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.TimeoutSeconds = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.PeriodSeconds == 0 {
				a.EphemeralContainerCommon.StartupProbe.PeriodSeconds = 10
			}
			if a.EphemeralContainerCommon.StartupProbe.SuccessThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.SuccessThreshold = 1
			}
			if a.EphemeralContainerCommon.StartupProbe.FailureThreshold == 0 {
				a.EphemeralContainerCommon.StartupProbe.FailureThreshold = 3
			}
		}
		if a.EphemeralContainerCommon.Lifecycle != nil {
			if a.EphemeralContainerCommon.Lifecycle.PostStart != nil {
				if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PostStart.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
			if a.EphemeralContainerCommon.Lifecycle.PreStop != nil {
				if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet != nil {
					apiscorev1.SetDefaults_HTTPGetAction(a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet)
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Path = "/"
					}
					if a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme == "" {
						a.EphemeralContainerCommon.Lifecycle.PreStop.HTTPGet.Scheme = corev1.URIScheme(corev1.URISchemeHTTP)
					}
				}
			}
		}
		if a.EphemeralContainerCommon.TerminationMessagePath == "" {
			a.EphemeralContainerCommon.TerminationMessagePath = string(corev1.TerminationMessagePathDefault)
		}
		if a.EphemeralContainerCommon.TerminationMessagePolicy == "" {
			a.EphemeralContainerCommon.TerminationMessagePolicy = corev1.TerminationMessagePolicy(corev1.TerminationMessageReadFile)
		}
	}
	if in.Spec.Template.Spec.RestartPolicy == "" {
		in.Spec.Template.Spec.RestartPolicy = corev1.RestartPolicy(corev1.RestartPolicyAlways)
	}
	if in.Spec.Template.Spec.TerminationGracePeriodSeconds == nil {
		ptrVar1 := int64(corev1.DefaultTerminationGracePeriodSeconds)
		in.Spec.Template.Spec.TerminationGracePeriodSeconds = &ptrVar1
	}
	if in.Spec.Template.Spec.DNSPolicy == "" {
		in.Spec.Template.Spec.DNSPolicy = corev1.DNSPolicy(corev1.DNSClusterFirst)
	}
	if in.Spec.Template.Spec.SecurityContext == nil {
		if err := json.Unmarshal([]byte(`{}`), &in.Spec.Template.Spec.SecurityContext); err != nil {
			panic(err)
		}
	}
	if in.Spec.Template.Spec.SchedulerName == "" {
		in.Spec.Template.Spec.SchedulerName = string(corev1.DefaultSchedulerName)
	}
	if in.Spec.Template.Spec.EnableServiceLinks == nil {
		ptrVar1 := bool(corev1.DefaultEnableServiceLinks)
		in.Spec.Template.Spec.EnableServiceLinks = &ptrVar1
	}
	apiscorev1.SetDefaults_ResourceList(&in.Spec.Template.Spec.Overhead)
	for i := range in.Spec.VolumeClaimTemplates {
		a := &in.Spec.VolumeClaimTemplates[i]
		apiscorev1.SetDefaults_PersistentVolumeClaim(a)
		apiscorev1.SetDefaults_PersistentVolumeClaimSpec(&a.Spec)
		apiscorev1.SetDefaults_ResourceList(&a.Spec.Resources.Limits)
		apiscorev1.SetDefaults_ResourceList(&a.Spec.Resources.Requests)
		if a.Spec.VolumeMode == nil {
			ptrVar1 := corev1.PersistentVolumeMode(corev1.PersistentVolumeFilesystem)
			a.Spec.VolumeMode = &ptrVar1
		}
		if a.Status.Phase == "" {
			a.Status.Phase = corev1.PersistentVolumeClaimPhase(corev1.ClaimPending)
		}
		apiscorev1.SetDefaults_ResourceList(&a.Status.Capacity)
		apiscorev1.SetDefaults_ResourceList(&a.Status.AllocatedResources)
	}
	if in.Spec.PodManagementPolicy == "" {
		in.Spec.PodManagementPolicy = v1.PodManagementPolicyType(v1.OrderedReadyPodManagement)
	}
	if in.Spec.UpdateStrategy.Type == "" {
		in.Spec.UpdateStrategy.Type = v1.StatefulSetUpdateStrategyType(v1.RollingUpdateStatefulSetStrategyType)
	}
	if in.Spec.RevisionHistoryLimit == nil {
		var ptrVar1 int32 = 10
		in.Spec.RevisionHistoryLimit = &ptrVar1
	}
}

func SetObjectDefaults_StatefulSetList(in *v1.StatefulSetList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_StatefulSet(a)
	}
}
