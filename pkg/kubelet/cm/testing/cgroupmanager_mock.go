/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	cm "k8s.io/kubernetes/pkg/kubelet/cm"
	reflect "reflect"
)

// MockCgroupManager is a mock of CgroupManager interface
type MockCgroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockCgroupManagerMockRecorder
}

// MockCgroupManagerMockRecorder is the mock recorder for MockCgroupManager
type MockCgroupManagerMockRecorder struct {
	mock *MockCgroupManager
}

// NewMockCgroupManager creates a new mock instance
func NewMockCgroupManager(ctrl *gomock.Controller) *MockCgroupManager {
	mock := &MockCgroupManager{ctrl: ctrl}
	mock.recorder = &MockCgroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCgroupManager) EXPECT() *MockCgroupManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCgroupManager) Create(arg0 *cm.CgroupConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCgroupManagerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCgroupManager)(nil).Create), arg0)
}

// Destroy mocks base method
func (m *MockCgroupManager) Destroy(arg0 *cm.CgroupConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockCgroupManagerMockRecorder) Destroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockCgroupManager)(nil).Destroy), arg0)
}

// Update mocks base method
func (m *MockCgroupManager) Update(arg0 *cm.CgroupConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCgroupManagerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCgroupManager)(nil).Update), arg0)
}

// Exists mocks base method
func (m *MockCgroupManager) Exists(name cm.CgroupName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockCgroupManagerMockRecorder) Exists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCgroupManager)(nil).Exists), name)
}

// Name mocks base method
func (m *MockCgroupManager) Name(name cm.CgroupName) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCgroupManagerMockRecorder) Name(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCgroupManager)(nil).Name), name)
}

// CgroupName mocks base method
func (m *MockCgroupManager) CgroupName(name string) cm.CgroupName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CgroupName", name)
	ret0, _ := ret[0].(cm.CgroupName)
	return ret0
}

// CgroupName indicates an expected call of CgroupName
func (mr *MockCgroupManagerMockRecorder) CgroupName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CgroupName", reflect.TypeOf((*MockCgroupManager)(nil).CgroupName), name)
}

// Pids mocks base method
func (m *MockCgroupManager) Pids(name cm.CgroupName) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pids", name)
	ret0, _ := ret[0].([]int)
	return ret0
}

// Pids indicates an expected call of Pids
func (mr *MockCgroupManagerMockRecorder) Pids(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pids", reflect.TypeOf((*MockCgroupManager)(nil).Pids), name)
}

// ReduceCPULimits mocks base method
func (m *MockCgroupManager) ReduceCPULimits(cgroupName cm.CgroupName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceCPULimits", cgroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceCPULimits indicates an expected call of ReduceCPULimits
func (mr *MockCgroupManagerMockRecorder) ReduceCPULimits(cgroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceCPULimits", reflect.TypeOf((*MockCgroupManager)(nil).ReduceCPULimits), cgroupName)
}

// MemoryUsage mocks base method
func (m *MockCgroupManager) MemoryUsage(name cm.CgroupName) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryUsage", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryUsage indicates an expected call of MemoryUsage
func (mr *MockCgroupManagerMockRecorder) MemoryUsage(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUsage", reflect.TypeOf((*MockCgroupManager)(nil).MemoryUsage), name)
}

// MockPodContainerManager is a mock of PodContainerManager interface
type MockPodContainerManager struct {
	ctrl     *gomock.Controller
	recorder *MockPodContainerManagerMockRecorder
}

// MockPodContainerManagerMockRecorder is the mock recorder for MockPodContainerManager
type MockPodContainerManagerMockRecorder struct {
	mock *MockPodContainerManager
}

// NewMockPodContainerManager creates a new mock instance
func NewMockPodContainerManager(ctrl *gomock.Controller) *MockPodContainerManager {
	mock := &MockPodContainerManager{ctrl: ctrl}
	mock.recorder = &MockPodContainerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodContainerManager) EXPECT() *MockPodContainerManagerMockRecorder {
	return m.recorder
}

// GetPodContainerName mocks base method
func (m *MockPodContainerManager) GetPodContainerName(arg0 *v1.Pod) (cm.CgroupName, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodContainerName", arg0)
	ret0, _ := ret[0].(cm.CgroupName)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetPodContainerName indicates an expected call of GetPodContainerName
func (mr *MockPodContainerManagerMockRecorder) GetPodContainerName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodContainerName", reflect.TypeOf((*MockPodContainerManager)(nil).GetPodContainerName), arg0)
}

// EnsureExists mocks base method
func (m *MockPodContainerManager) EnsureExists(arg0 *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureExists indicates an expected call of EnsureExists
func (mr *MockPodContainerManagerMockRecorder) EnsureExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureExists", reflect.TypeOf((*MockPodContainerManager)(nil).EnsureExists), arg0)
}

// Exists mocks base method
func (m *MockPodContainerManager) Exists(arg0 *v1.Pod) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockPodContainerManagerMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPodContainerManager)(nil).Exists), arg0)
}

// Destroy mocks base method
func (m *MockPodContainerManager) Destroy(name cm.CgroupName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockPodContainerManagerMockRecorder) Destroy(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPodContainerManager)(nil).Destroy), name)
}

// ReduceCPULimits mocks base method
func (m *MockPodContainerManager) ReduceCPULimits(name cm.CgroupName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceCPULimits", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceCPULimits indicates an expected call of ReduceCPULimits
func (mr *MockPodContainerManagerMockRecorder) ReduceCPULimits(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceCPULimits", reflect.TypeOf((*MockPodContainerManager)(nil).ReduceCPULimits), name)
}

// GetAllPodsFromCgroups mocks base method
func (m *MockPodContainerManager) GetAllPodsFromCgroups() (map[types.UID]cm.CgroupName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPodsFromCgroups")
	ret0, _ := ret[0].(map[types.UID]cm.CgroupName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPodsFromCgroups indicates an expected call of GetAllPodsFromCgroups
func (mr *MockPodContainerManagerMockRecorder) GetAllPodsFromCgroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPodsFromCgroups", reflect.TypeOf((*MockPodContainerManager)(nil).GetAllPodsFromCgroups))
}

// IsPodCgroup mocks base method
func (m *MockPodContainerManager) IsPodCgroup(cgroupfs string) (bool, types.UID) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPodCgroup", cgroupfs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(types.UID)
	return ret0, ret1
}

// IsPodCgroup indicates an expected call of IsPodCgroup
func (mr *MockPodContainerManagerMockRecorder) IsPodCgroup(cgroupfs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPodCgroup", reflect.TypeOf((*MockPodContainerManager)(nil).IsPodCgroup), cgroupfs)
}
