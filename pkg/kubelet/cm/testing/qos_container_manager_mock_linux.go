/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: qos_container_manager_linux.go

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	cm "k8s.io/kubernetes/pkg/kubelet/cm"
	reflect "reflect"
)

// MockQOSContainerManager is a mock of QOSContainerManager interface
type MockQOSContainerManager struct {
	ctrl     *gomock.Controller
	recorder *MockQOSContainerManagerMockRecorder
}

// MockQOSContainerManagerMockRecorder is the mock recorder for MockQOSContainerManager
type MockQOSContainerManagerMockRecorder struct {
	mock *MockQOSContainerManager
}

// NewMockQOSContainerManager creates a new mock instance
func NewMockQOSContainerManager(ctrl *gomock.Controller) *MockQOSContainerManager {
	mock := &MockQOSContainerManager{ctrl: ctrl}
	mock.recorder = &MockQOSContainerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQOSContainerManager) EXPECT() *MockQOSContainerManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockQOSContainerManager) Start(arg0 func() v1.ResourceList, arg1 cm.ActivePodsFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockQOSContainerManagerMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQOSContainerManager)(nil).Start), arg0, arg1)
}

// GetQOSContainersInfo mocks base method
func (m *MockQOSContainerManager) GetQOSContainersInfo() cm.QOSContainersInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQOSContainersInfo")
	ret0, _ := ret[0].(cm.QOSContainersInfo)
	return ret0
}

// GetQOSContainersInfo indicates an expected call of GetQOSContainersInfo
func (mr *MockQOSContainerManagerMockRecorder) GetQOSContainersInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQOSContainersInfo", reflect.TypeOf((*MockQOSContainerManager)(nil).GetQOSContainersInfo))
}

// UpdateCgroups mocks base method
func (m *MockQOSContainerManager) UpdateCgroups() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCgroups")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCgroups indicates an expected call of UpdateCgroups
func (mr *MockQOSContainerManagerMockRecorder) UpdateCgroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCgroups", reflect.TypeOf((*MockQOSContainerManager)(nil).UpdateCgroups))
}
