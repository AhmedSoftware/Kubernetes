// Code generated by MockGen. DO NOT EDIT.
// Source: cpu_manager.go

// Package mock is a generated GoMock package.
package cpumanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/cri-api/pkg/apis/runtime/v1"
	containermap "k8s.io/kubernetes/pkg/kubelet/cm/containermap"
	state "k8s.io/kubernetes/pkg/kubelet/cm/cpumanager/state"
	cpuset "k8s.io/kubernetes/pkg/kubelet/cm/cpuset"
	topologymanager "k8s.io/kubernetes/pkg/kubelet/cm/topologymanager"
	config "k8s.io/kubernetes/pkg/kubelet/config"
	status "k8s.io/kubernetes/pkg/kubelet/status"
)

// MockruntimeService is a mock of runtimeService interface.
type MockruntimeService struct {
	ctrl     *gomock.Controller
	recorder *MockruntimeServiceMockRecorder
}

// MockruntimeServiceMockRecorder is the mock recorder for MockruntimeService.
type MockruntimeServiceMockRecorder struct {
	mock *MockruntimeService
}

// NewMockruntimeService creates a new mock instance.
func NewMockruntimeService(ctrl *gomock.Controller) *MockruntimeService {
	mock := &MockruntimeService{ctrl: ctrl}
	mock.recorder = &MockruntimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockruntimeService) EXPECT() *MockruntimeServiceMockRecorder {
	return m.recorder
}

// UpdateContainerResources mocks base method.
func (m *MockruntimeService) UpdateContainerResources(id string, resources *v10.LinuxContainerResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerResources", id, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerResources indicates an expected call of UpdateContainerResources.
func (mr *MockruntimeServiceMockRecorder) UpdateContainerResources(id, resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerResources", reflect.TypeOf((*MockruntimeService)(nil).UpdateContainerResources), id, resources)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddContainer mocks base method.
func (m *MockManager) AddContainer(p *v1.Pod, c *v1.Container, containerID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddContainer", p, c, containerID)
}

// AddContainer indicates an expected call of AddContainer.
func (mr *MockManagerMockRecorder) AddContainer(p, c, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockManager)(nil).AddContainer), p, c, containerID)
}

// Allocate mocks base method.
func (m *MockManager) Allocate(pod *v1.Pod, container *v1.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", pod, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockManagerMockRecorder) Allocate(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockManager)(nil).Allocate), pod, container)
}

// GetAllocatableCPUs mocks base method.
func (m *MockManager) GetAllocatableCPUs() cpuset.CPUSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocatableCPUs")
	ret0, _ := ret[0].(cpuset.CPUSet)
	return ret0
}

// GetAllocatableCPUs indicates an expected call of GetAllocatableCPUs.
func (mr *MockManagerMockRecorder) GetAllocatableCPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocatableCPUs", reflect.TypeOf((*MockManager)(nil).GetAllocatableCPUs))
}

// GetCPUAffinity mocks base method.
func (m *MockManager) GetCPUAffinity(podUID, containerName string) cpuset.CPUSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUAffinity", podUID, containerName)
	ret0, _ := ret[0].(cpuset.CPUSet)
	return ret0
}

// GetCPUAffinity indicates an expected call of GetCPUAffinity.
func (mr *MockManagerMockRecorder) GetCPUAffinity(podUID, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUAffinity", reflect.TypeOf((*MockManager)(nil).GetCPUAffinity), podUID, containerName)
}

// GetExclusiveCPUs mocks base method.
func (m *MockManager) GetExclusiveCPUs(podUID, containerName string) cpuset.CPUSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExclusiveCPUs", podUID, containerName)
	ret0, _ := ret[0].(cpuset.CPUSet)
	return ret0
}

// GetExclusiveCPUs indicates an expected call of GetExclusiveCPUs.
func (mr *MockManagerMockRecorder) GetExclusiveCPUs(podUID, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExclusiveCPUs", reflect.TypeOf((*MockManager)(nil).GetExclusiveCPUs), podUID, containerName)
}

// GetPodTopologyHints mocks base method.
func (m *MockManager) GetPodTopologyHints(pod *v1.Pod) map[string][]topologymanager.TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTopologyHints", pod)
	ret0, _ := ret[0].(map[string][]topologymanager.TopologyHint)
	return ret0
}

// GetPodTopologyHints indicates an expected call of GetPodTopologyHints.
func (mr *MockManagerMockRecorder) GetPodTopologyHints(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTopologyHints", reflect.TypeOf((*MockManager)(nil).GetPodTopologyHints), pod)
}

// GetTopologyHints mocks base method.
func (m *MockManager) GetTopologyHints(arg0 *v1.Pod, arg1 *v1.Container) map[string][]topologymanager.TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyHints", arg0, arg1)
	ret0, _ := ret[0].(map[string][]topologymanager.TopologyHint)
	return ret0
}

// GetTopologyHints indicates an expected call of GetTopologyHints.
func (mr *MockManagerMockRecorder) GetTopologyHints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyHints", reflect.TypeOf((*MockManager)(nil).GetTopologyHints), arg0, arg1)
}

// RemoveContainer mocks base method.
func (m *MockManager) RemoveContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockManagerMockRecorder) RemoveContainer(containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockManager)(nil).RemoveContainer), containerID)
}

// Start mocks base method.
func (m *MockManager) Start(activePods ActivePodsFunc, sourcesReady config.SourcesReady, podStatusProvider status.PodStatusProvider, containerRuntime runtimeService, initialContainers containermap.ContainerMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", activePods, sourcesReady, podStatusProvider, containerRuntime, initialContainers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start(activePods, sourcesReady, podStatusProvider, containerRuntime, initialContainers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start), activePods, sourcesReady, podStatusProvider, containerRuntime, initialContainers)
}

// State mocks base method.
func (m *MockManager) State() state.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(state.Reader)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockManagerMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockManager)(nil).State))
}
