/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package testing is a generated GoMock package.
package testing

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	devicemanager "k8s.io/kubernetes/pkg/kubelet/cm/devicemanager"
	topologymanager "k8s.io/kubernetes/pkg/kubelet/cm/topologymanager"
	config "k8s.io/kubernetes/pkg/kubelet/config"
	lifecycle "k8s.io/kubernetes/pkg/kubelet/lifecycle"
	cache "k8s.io/kubernetes/pkg/kubelet/pluginmanager/cache"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockManager) Start(activePods devicemanager.ActivePodsFunc, sourcesReady config.SourcesReady) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", activePods, sourcesReady)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockManagerMockRecorder) Start(activePods, sourcesReady interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start), activePods, sourcesReady)
}

// Allocate mocks base method
func (m *MockManager) Allocate(pod *v1.Pod, container *v1.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", pod, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate
func (mr *MockManagerMockRecorder) Allocate(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockManager)(nil).Allocate), pod, container)
}

// UpdatePluginResources mocks base method
func (m *MockManager) UpdatePluginResources(node *framework.NodeInfo, attrs *lifecycle.PodAdmitAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePluginResources", node, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePluginResources indicates an expected call of UpdatePluginResources
func (mr *MockManagerMockRecorder) UpdatePluginResources(node, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePluginResources", reflect.TypeOf((*MockManager)(nil).UpdatePluginResources), node, attrs)
}

// Stop mocks base method
func (m *MockManager) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}

// GetDeviceRunContainerOptions mocks base method
func (m *MockManager) GetDeviceRunContainerOptions(pod *v1.Pod, container *v1.Container) (*devicemanager.DeviceRunContainerOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRunContainerOptions", pod, container)
	ret0, _ := ret[0].(*devicemanager.DeviceRunContainerOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceRunContainerOptions indicates an expected call of GetDeviceRunContainerOptions
func (mr *MockManagerMockRecorder) GetDeviceRunContainerOptions(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRunContainerOptions", reflect.TypeOf((*MockManager)(nil).GetDeviceRunContainerOptions), pod, container)
}

// GetCapacity mocks base method
func (m *MockManager) GetCapacity() (v1.ResourceList, v1.ResourceList, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacity")
	ret0, _ := ret[0].(v1.ResourceList)
	ret1, _ := ret[1].(v1.ResourceList)
	ret2, _ := ret[2].([]string)
	return ret0, ret1, ret2
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockManagerMockRecorder) GetCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockManager)(nil).GetCapacity))
}

// GetWatcherHandler mocks base method
func (m *MockManager) GetWatcherHandler() cache.PluginHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatcherHandler")
	ret0, _ := ret[0].(cache.PluginHandler)
	return ret0
}

// GetWatcherHandler indicates an expected call of GetWatcherHandler
func (mr *MockManagerMockRecorder) GetWatcherHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatcherHandler", reflect.TypeOf((*MockManager)(nil).GetWatcherHandler))
}

// GetDevices mocks base method
func (m *MockManager) GetDevices(podUID, containerName string) devicemanager.ResourceDeviceInstances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", podUID, containerName)
	ret0, _ := ret[0].(devicemanager.ResourceDeviceInstances)
	return ret0
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockManagerMockRecorder) GetDevices(podUID, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockManager)(nil).GetDevices), podUID, containerName)
}

// GetAllocatableDevices mocks base method
func (m *MockManager) GetAllocatableDevices() devicemanager.ResourceDeviceInstances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocatableDevices")
	ret0, _ := ret[0].(devicemanager.ResourceDeviceInstances)
	return ret0
}

// GetAllocatableDevices indicates an expected call of GetAllocatableDevices
func (mr *MockManagerMockRecorder) GetAllocatableDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocatableDevices", reflect.TypeOf((*MockManager)(nil).GetAllocatableDevices))
}

// ShouldResetExtendedResourceCapacity mocks base method
func (m *MockManager) ShouldResetExtendedResourceCapacity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldResetExtendedResourceCapacity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldResetExtendedResourceCapacity indicates an expected call of ShouldResetExtendedResourceCapacity
func (mr *MockManagerMockRecorder) ShouldResetExtendedResourceCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldResetExtendedResourceCapacity", reflect.TypeOf((*MockManager)(nil).ShouldResetExtendedResourceCapacity))
}

// GetTopologyHints mocks base method
func (m *MockManager) GetTopologyHints(pod *v1.Pod, container *v1.Container) map[string][]topologymanager.TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyHints", pod, container)
	ret0, _ := ret[0].(map[string][]topologymanager.TopologyHint)
	return ret0
}

// GetTopologyHints indicates an expected call of GetTopologyHints
func (mr *MockManagerMockRecorder) GetTopologyHints(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyHints", reflect.TypeOf((*MockManager)(nil).GetTopologyHints), pod, container)
}

// GetPodTopologyHints mocks base method
func (m *MockManager) GetPodTopologyHints(pod *v1.Pod) map[string][]topologymanager.TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTopologyHints", pod)
	ret0, _ := ret[0].(map[string][]topologymanager.TopologyHint)
	return ret0
}

// GetPodTopologyHints indicates an expected call of GetPodTopologyHints
func (mr *MockManagerMockRecorder) GetPodTopologyHints(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTopologyHints", reflect.TypeOf((*MockManager)(nil).GetPodTopologyHints), pod)
}

// UpdateAllocatedDevices mocks base method
func (m *MockManager) UpdateAllocatedDevices() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAllocatedDevices")
}

// UpdateAllocatedDevices indicates an expected call of UpdateAllocatedDevices
func (mr *MockManagerMockRecorder) UpdateAllocatedDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllocatedDevices", reflect.TypeOf((*MockManager)(nil).UpdateAllocatedDevices))
}
