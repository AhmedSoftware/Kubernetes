// Code generated by MockGen. DO NOT EDIT.
// Source: topologymanager/topology_manager.go

// Package topologymanager is a generated GoMock package.
package topologymanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	lifecycle "k8s.io/kubernetes/pkg/kubelet/lifecycle"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddContainer mocks base method.
func (m *MockManager) AddContainer(pod *v1.Pod, container *v1.Container, containerID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddContainer", pod, container, containerID)
}

// AddContainer indicates an expected call of AddContainer.
func (mr *MockManagerMockRecorder) AddContainer(pod, container, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainer", reflect.TypeOf((*MockManager)(nil).AddContainer), pod, container, containerID)
}

// AddHintProvider mocks base method.
func (m *MockManager) AddHintProvider(arg0 HintProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHintProvider", arg0)
}

// AddHintProvider indicates an expected call of AddHintProvider.
func (mr *MockManagerMockRecorder) AddHintProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHintProvider", reflect.TypeOf((*MockManager)(nil).AddHintProvider), arg0)
}

// Admit mocks base method.
func (m *MockManager) Admit(attrs *lifecycle.PodAdmitAttributes) lifecycle.PodAdmitResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Admit", attrs)
	ret0, _ := ret[0].(lifecycle.PodAdmitResult)
	return ret0
}

// Admit indicates an expected call of Admit.
func (mr *MockManagerMockRecorder) Admit(attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Admit", reflect.TypeOf((*MockManager)(nil).Admit), attrs)
}

// GetAffinity mocks base method.
func (m *MockManager) GetAffinity(podUID, containerName string) TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinity", podUID, containerName)
	ret0, _ := ret[0].(TopologyHint)
	return ret0
}

// GetAffinity indicates an expected call of GetAffinity.
func (mr *MockManagerMockRecorder) GetAffinity(podUID, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinity", reflect.TypeOf((*MockManager)(nil).GetAffinity), podUID, containerName)
}

// RemoveContainer mocks base method.
func (m *MockManager) RemoveContainer(containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockManagerMockRecorder) RemoveContainer(containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockManager)(nil).RemoveContainer), containerID)
}

// MockHintProvider is a mock of HintProvider interface.
type MockHintProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHintProviderMockRecorder
}

// MockHintProviderMockRecorder is the mock recorder for MockHintProvider.
type MockHintProviderMockRecorder struct {
	mock *MockHintProvider
}

// NewMockHintProvider creates a new mock instance.
func NewMockHintProvider(ctrl *gomock.Controller) *MockHintProvider {
	mock := &MockHintProvider{ctrl: ctrl}
	mock.recorder = &MockHintProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHintProvider) EXPECT() *MockHintProviderMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockHintProvider) Allocate(pod *v1.Pod, container *v1.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", pod, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocate indicates an expected call of Allocate.
func (mr *MockHintProviderMockRecorder) Allocate(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockHintProvider)(nil).Allocate), pod, container)
}

// GetPodTopologyHints mocks base method.
func (m *MockHintProvider) GetPodTopologyHints(pod *v1.Pod) map[string][]TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTopologyHints", pod)
	ret0, _ := ret[0].(map[string][]TopologyHint)
	return ret0
}

// GetPodTopologyHints indicates an expected call of GetPodTopologyHints.
func (mr *MockHintProviderMockRecorder) GetPodTopologyHints(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTopologyHints", reflect.TypeOf((*MockHintProvider)(nil).GetPodTopologyHints), pod)
}

// GetTopologyHints mocks base method.
func (m *MockHintProvider) GetTopologyHints(pod *v1.Pod, container *v1.Container) map[string][]TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyHints", pod, container)
	ret0, _ := ret[0].(map[string][]TopologyHint)
	return ret0
}

// GetTopologyHints indicates an expected call of GetTopologyHints.
func (mr *MockHintProviderMockRecorder) GetTopologyHints(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyHints", reflect.TypeOf((*MockHintProvider)(nil).GetTopologyHints), pod, container)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAffinity mocks base method.
func (m *MockStore) GetAffinity(podUID, containerName string) TopologyHint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinity", podUID, containerName)
	ret0, _ := ret[0].(TopologyHint)
	return ret0
}

// GetAffinity indicates an expected call of GetAffinity.
func (mr *MockStoreMockRecorder) GetAffinity(podUID, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinity", reflect.TypeOf((*MockStore)(nil).GetAffinity), podUID, containerName)
}
